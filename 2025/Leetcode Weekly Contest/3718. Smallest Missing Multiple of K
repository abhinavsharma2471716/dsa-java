Given an integer array nums and an integer k, return the smallest positive multiple of k that is missing from nums.

A multiple of k is any positive integer divisible by k.

 

Example 1:

Input: nums = [8,2,3,4,6], k = 2

Output: 10

Explanation:

The multiples of k = 2 are 2, 4, 6, 8, 10, 12... and the smallest multiple missing from nums is 10.

Example 2:

Input: nums = [1,4,7,10,15], k = 5

Output: 5

Explanation:

The multiples of k = 5 are 5, 10, 15, 20... and the smallest multiple missing from nums is 5.

 

Constraints:

1 <= nums.length <= 100
1 <= nums[i] <= 100
1 <= k <= 100

Code :

class Solution {
    public int missingMultiple(int[] nums, int k) {
        Set<Integer> set = new HashSet<>();
        int len = nums.length;

        // Step 1: Add all elements to a HashSet for O(1) lookups
        for (int i = 0; i < len; i++) {
            set.add(nums[i]);
        }

        // Step 2: Start checking multiples of k (k, 2k, 3k, ...)
        int val = 1;
        while (set.contains(val * k)) {
            val++;
        }

        // Step 3: Return the first missing multiple
        return val * k;
    }
}
