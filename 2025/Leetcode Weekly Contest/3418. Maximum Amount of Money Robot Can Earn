You are given an m x n grid. A robot starts at the top-left corner of the grid (0, 0) and wants to reach the bottom-right corner (m - 1, n - 1). The robot can move either right or down at any point in time.

The grid contains a value coins[i][j] in each cell:

If coins[i][j] >= 0, the robot gains that many coins.
If coins[i][j] < 0, the robot encounters a robber, and the robber steals the absolute value of coins[i][j] coins.
The robot has a special ability to neutralize robbers in at most 2 cells on its path, preventing them from stealing coins in those cells.

Note: The robot's total coins can be negative.

Return the maximum profit the robot can gain on the route.

 

Example 1:

Input: coins = [[0,1,-1],[1,-2,3],[2,-3,4]]

Output: 8

Explanation:

An optimal path for maximum coins is:

Start at (0, 0) with 0 coins (total coins = 0).
Move to (0, 1), gaining 1 coin (total coins = 0 + 1 = 1).
Move to (1, 1), where there's a robber stealing 2 coins. The robot uses one neutralization here, avoiding the robbery (total coins = 1).
Move to (1, 2), gaining 3 coins (total coins = 1 + 3 = 4).
Move to (2, 2), gaining 4 coins (total coins = 4 + 4 = 8).

Code :

import java.util.Arrays;

class Solution {
    public int maximumAmount(int[][] coins) {
        int m = coins.length, n = coins[0].length;
        int[][][] dp = new int[m][n][3]; // [row][col][neutralizations]

        // Initialize the dp array with very small values
        for (int[][] row : dp) {
            for (int[] col : row) {
                Arrays.fill(col, Integer.MIN_VALUE);
            }
        }

        // Base case
        dp[0][0][0] = coins[0][0];
        dp[0][0][1] = coins[0][0];
        dp[0][0][2] = coins[0][0];
        
        if (coins[0][0] < 0) {
            dp[0][0][1] = 0; // Neutralize one robber, no coins collected yet
            dp[0][0][2] = 0; // Neutralize two robbers, no coins collected yet
        } else {
            dp[0][0][1] = coins[0][0];
            dp[0][0][2] = coins[0][0];
        }

        // DP computation
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < 3; k++) {
                    if (dp[i][j][k] == Integer.MIN_VALUE) continue;

                    int gain = coins[i][j] >= 0 ? coins[i][j] : 0;
                    int loss = coins[i][j] < 0 ? -coins[i][j] : 0;

                    // Move Down
                    if (i + 1 < m) {
                        dp[i + 1][j][k] = Math.max(dp[i + 1][j][k], dp[i][j][k] + coins[i + 1][j]);
                        if (k < 2 && coins[i + 1][j] < 0) {
                            dp[i + 1][j][k + 1] = Math.max(dp[i + 1][j][k + 1], dp[i][j][k]);
                        }
                    }

                    // Move Right
                    if (j + 1 < n) {
                        dp[i][j + 1][k] = Math.max(dp[i][j + 1][k], dp[i][j][k] + coins[i][j + 1]);
                        if (k < 2 && coins[i][j + 1] < 0) {
                            dp[i][j + 1][k + 1] = Math.max(dp[i][j + 1][k + 1], dp[i][j][k]);
                        }
                    }
                }
            }
        }

        // Result: maximum value at bottom-right corner with any neutralization state
        return Math.max(dp[m - 1][n - 1][0], Math.max(dp[m - 1][n - 1][1], dp[m - 1][n - 1][2]));
    }
}
