You are given an integer n representing the number of nodes in a graph, labeled from 0 to n - 1.

You are also given an integer array nums of length n sorted in non-decreasing order, and an integer maxDiff.

An undirected edge exists between nodes i and j if the absolute difference between nums[i] and nums[j] is at most maxDiff (i.e., |nums[i] - nums[j]| <= maxDiff).

You are also given a 2D integer array queries. For each queries[i] = [ui, vi], determine whether there exists a path between nodes ui and vi.

Return a boolean array answer, where answer[i] is true if there exists a path between ui and vi in the ith query and false otherwise.

 

Example 1:

Input: n = 2, nums = [1,3], maxDiff = 1, queries = [[0,0],[0,1]]

Output: [true,false]

Explanation:

Query [0,0]: Node 0 has a trivial path to itself.
Query [0,1]: There is no edge between Node 0 and Node 1 because |nums[0] - nums[1]| = |1 - 3| = 2, which is greater than maxDiff.
Thus, the final answer after processing all the queries is [true, false].
Example 2:

Input: n = 4, nums = [2,5,6,8], maxDiff = 2, queries = [[0,1],[0,2],[1,3],[2,3]]

Output: [false,false,true,true]

Explanation:

The resulting graph is:



Query [0,1]: There is no edge between Node 0 and Node 1 because |nums[0] - nums[1]| = |2 - 5| = 3, which is greater than maxDiff.
Query [0,2]: There is no edge between Node 0 and Node 2 because |nums[0] - nums[2]| = |2 - 6| = 4, which is greater than maxDiff.
Query [1,3]: There is a path between Node 1 and Node 3 through Node 2 since |nums[1] - nums[2]| = |5 - 6| = 1 and |nums[2] - nums[3]| = |6 - 8| = 2, both of which are within maxDiff.
Query [2,3]: There is an edge between Node 2 and Node 3 because |nums[2] - nums[3]| = |6 - 8| = 2, which is equal to maxDiff.
Thus, the final answer after processing all the queries is [false, false, true, true].
 

Constraints:

1 <= n == nums.length <= 10^5
0 <= nums[i] <= 10^5
nums is sorted in non-decreasing order.
0 <= maxDiff <= 105
1 <= queries.length <= 105
queries[i] == [ui, vi]
0 <= ui, vi < n

Code :

Approach 1 - Disjoint-Set/Union Find
Algorithm
findParent(u, parent[]) - DSU Implementation
If parent[u] == u, then return u.
Update parent[u] with findParent(parent[u]).
Return parent[u].

Let n be the length of nums/number of vertices and Q be the length of queries

Time complexity: O((nlog n)+Q)
The initialization of parent takes O(n) time
The search of components for each vertex u, 1â‰¤u<n costs O((nâˆ’1)log n)â‰¡O(nlog n)
The filling of the answer takes O(Q)
Thus, all processes take O(n+n log n+Q)â‰¡O((n+1)log n+Q)â‰¡O(n log n+Q)

Space complexity: O(n)
We created parent with size n and the answer with size n, so it's O(2n) in total, which equivalent to O(n) in terms of complexity count.



class Solution {
    private int[] parent;
    public int findPar(int i) {
        if(parent[i] == i) return i;
        return parent[i] = findPar(parent[i]);
    }
    public boolean[] pathExistenceQueries(int n, int[] nums, int maxDiff, int[][] queries) {
        parent = new int[n];
        for(int i = 0; i < n; i++){
            parent[i] = i;
        }
        for(int i=1; i<n; i++) {
            if(nums[i] - nums[i-1] <= maxDiff) {
                parent[i] = findPar(i-1);
            }
        }
        boolean[] ans = new boolean[queries.length];
        for(int i=0; i<queries.length; i++) {
            ans[i] = (findPar(queries[i][0]) == findPar(queries[i][1]));
        }
        return ans;
    }
}



Approach 2 - Component Count
Instead of Searching parents, since the array nums is non-decreasing, using the component count is more feasible and efficient

Let n be the length of nums/number of vertices and Q be the length of queries

Time complexity: O(n+Q)
The search of components for each vertex u, 1â‰¤u<n costs O(nâˆ’1)â‰¡O(n)
The filling of the answer takes O(Q)
Thus, all processes take O(n+Q)

Space complexity: O(n)
We created component with size n and the answer with size n, so it's O(2n) in total, which equivalent to O(n) in terms of complexity count.



class Solution {
    public boolean[] pathExistenceQueries(int n, int[] nums, int maxDiff, int[][] queries) {
        int[] component = new int[n];
        int componentId = 0;
        for(int i=1; i<n; i++) {
            if(nums[i] - nums[i-1] > maxDiff) 
                ++componentId;
            component[i] = componentId;
        }
        boolean[] ans = new boolean[queries.length];
        for(int i=0; i<queries.length; i++) {
            ans[i] = (component[queries[i][0]] == component[queries[i][1]]);
        }
        return ans;
    }
}

Extra :

ðŸ‘‰ BFS is possible, but not efficient enough for this problem if there are many queries.

ðŸ”¥ Why BFS causes TLE:
For each query, your BFS starts fresh.
Each BFS can take up to O(n) time (worst case).
If there are Q queries, total time = O(Q Ã— n).
If n ~ 10^5 and Q ~ 10^5, then Q Ã— n ~ 10^10 operations â†’ TLE (Time Limit Exceeded).



