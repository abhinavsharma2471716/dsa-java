You are given three arrays of length n that describe the properties of n coupons: code, businessLine, and isActive. The ith coupon has:

code[i]: a string representing the coupon identifier.
businessLine[i]: a string denoting the business category of the coupon.
isActive[i]: a boolean indicating whether the coupon is currently active.
A coupon is considered valid if all of the following conditions hold:

code[i] is non-empty and consists only of alphanumeric characters (a-z, A-Z, 0-9) and underscores (_).
businessLine[i] is one of the following four categories: "electronics", "grocery", "pharmacy", "restaurant".
isActive[i] is true.
Return an array of the codes of all valid coupons, sorted first by their businessLine in the order: "electronics", "grocery", "pharmacy", "restaurant", and then by code in lexicographical (ascending) order within each category.

 

Example 1:

Input: code = ["SAVE20","","PHARMA5","SAVE@20"], businessLine = ["restaurant","grocery","pharmacy","restaurant"], isActive = [true,true,true,true]

Output: ["PHARMA5","SAVE20"]

Explanation:

First coupon is valid.
Second coupon has empty code (invalid).
Third coupon is valid.
Fourth coupon has special character @ (invalid).
Example 2:

Input: code = ["GROCERY15","ELECTRONICS_50","DISCOUNT10"], businessLine = ["grocery","electronics","invalid"], isActive = [false,true,true]

Output: ["ELECTRONICS_50"]

Explanation:

First coupon is inactive (invalid).
Second coupon is valid.
Third coupon has invalid business line (invalid).
 

Constraints:

n == code.length == businessLine.length == isActive.length
1 <= n <= 100
0 <= code[i].length, businessLine[i].length <= 100
code[i] and businessLine[i] consist of printable ASCII characters.
isActive[i] is either true or false.


Code :

class Solution {
    public List<String> validateCoupons(String[] code, String[] businessLine, boolean[] isActive) {
        // Define the valid business lines and their custom sorting order
        Map<String, Integer> businessPriority = new HashMap<>();
        businessPriority.put("electronics", 0);
        businessPriority.put("grocery", 1);
        businessPriority.put("pharmacy", 2);
        businessPriority.put("restaurant", 3);

        List<String[]> validCoupons = new ArrayList<>();

        for (int i = 0; i < code.length; i++) {
            if (isActive[i] &&
                code[i] != null && !code[i].isEmpty() && code[i].matches("[a-zA-Z0-9_]+") &&
                businessPriority.containsKey(businessLine[i])) {

                validCoupons.add(new String[]{code[i], businessLine[i]});
            }
        }

        // Sort first by business line priority, then by code lexicographically
        validCoupons.sort((a, b) -> {
            int cmp = Integer.compare(businessPriority.get(a[1]), businessPriority.get(b[1]));
            if (cmp == 0) {
                return a[0].compareTo(b[0]);
            }
            return cmp;
        });

        // Collect just the codes from the sorted list
        List<String> result = new ArrayList<>();
        for (String[] coupon : validCoupons) {
            result.add(coupon[0]);
        }

        return result;
    }
}
