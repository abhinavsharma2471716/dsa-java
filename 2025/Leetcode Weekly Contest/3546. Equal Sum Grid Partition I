You are given an m x n matrix grid of positive integers. Your task is to determine if it is possible to make either one horizontal or one vertical cut on the grid such that:

Each of the two resulting sections formed by the cut is non-empty.
The sum of the elements in both sections is equal.
Return true if such a partition exists; otherwise return false.

 

Example 1:

Input: grid = [[1,4],[2,3]]

Output: true

Explanation:



A horizontal cut between row 0 and row 1 results in two non-empty sections, each with a sum of 5. Thus, the answer is true.

Example 2:

Input: grid = [[1,3],[2,4]]

Output: false

Explanation:

No horizontal or vertical cut results in two non-empty sections with equal sums. Thus, the answer is false.

 

Constraints:

1 <= m == grid.length <= 10^5
1 <= n == grid[i].length <= 10^5
2 <= m * n <= 10^5
1 <= grid[i][j] <= 10^5

Code :

class Solution {
    public boolean canPartitionGrid(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;

        int total = 0;
        for (int[] row : grid) {
            for (int cell : row) {
                total += cell;
            }
        }

         // Check vertical cuts
        int[] colSum = new int[n];
        for (int j = 0; j < n; j++) {
            for (int i = 0; i < m; i++) {
                colSum[j] += grid[i][j];
            }
        }

        int leftSum = 0;
        for (int j = 0; j < n - 1; j++) {
            leftSum += colSum[j];
            if (leftSum * 2 == total) {
                return true;
            }
        }

        // Check horizontal cuts
        int[] rowSum = new int[m];
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                rowSum[i] += grid[i][j];
            }
        }

        int topSum = 0;
        for (int i = 0; i < m - 1; i++) {
            topSum += rowSum[i];
            if (topSum * 2 == total) {
                return true;
            }
        }

       

        return false;
    }
}
