You are given a positive integer n, representing an n x n city. You are also given a 2D grid buildings, where buildings[i] = [x, y] denotes a unique building located at coordinates [x, y].

A building is covered if there is at least one building in all four directions: left, right, above, and below.

Return the number of covered buildings.

 

Example 1:



Input: n = 3, buildings = [[1,2],[2,2],[3,2],[2,1],[2,3]]

Output: 1

Explanation:

Only building [2,2] is covered as it has at least one building:
above ([1,2])
below ([3,2])
left ([2,1])
right ([2,3])
Thus, the count of covered buildings is 1.
Example 2:



Input: n = 3, buildings = [[1,1],[1,2],[2,1],[2,2]]

Output: 0

Explanation:

No building has at least one building in all four directions.
Example 3:



Input: n = 5, buildings = [[1,3],[3,2],[3,3],[3,5],[5,3]]

Output: 1

Explanation:

Only building [3,3] is covered as it has at least one building:
above ([1,3])
below ([5,3])
left ([3,2])
right ([3,5])
Thus, the count of covered buildings is 1.
 

Constraints:

2 <= n <= 105
1 <= buildings.length <= 105 
buildings[i] = [x, y]
1 <= x, y <= n
All coordinates of buildings are unique.



Code : TC ( O(n + m) )

class Solution {
    public int countCoveredBuildings(int n, int[][] buildings) {
        int[] xLeft = new int[n + 1]; // Tracks the leftmost x for each y
        int[] xRight = new int[n + 1]; // Tracks the rightmost x for each y
        int[] yLeft = new int[n + 1]; // Tracks the leftmost y for each x
        int[] yRight = new int[n + 1];  // Tracks the rightmost y for each x
        int total = buildings.length;

        // Initialize the arrays with default values
        for (int i = 1; i <= n; ++i) {
            xRight[i] = 0; // Set to maximum value
            xLeft[i] = n + 1; // Set to minimum value
            yRight[i] = 0;
            yLeft[i] = n + 1;

        }

        Set<String> buildingSet = new HashSet<>();
        // Process each building to update the min/max values for rows and columns
        for (int[] building : buildings) {
            int x = building[0];
            int y = building[1];
            xLeft[y] = Math.min(xLeft[y], x); // Update the left boundary for y
            xRight[y] = Math.max(xRight[y], x); // Update the right boundary for y
            yLeft[x] = Math.min(yLeft[x], y);  // Update the left boundary for x
            yRight[x] = Math.max(yRight[x], y); // Update the right boundary for x
            buildingSet.add(x + "," + y); // Store the building in a set for quick lookup
        }

        int result = total; // Initialize result with the total number of buildings
        // Iterate through atotal buildings to check if they are covered
        for (int[] building : buildings) {
            int x = building[0];
            int y = building[1];
            // Check if the building is covered by its neighbors
            if (x > xLeft[y] && x < xRight[y] && y > yLeft[x] && y < yRight[x]) {
                continue; // The building is covered, so we skip it
            } else {
                result -= 1; // The building is not covered, decrement the result
            }
        }

        return result; // Return the final result
    }
}
