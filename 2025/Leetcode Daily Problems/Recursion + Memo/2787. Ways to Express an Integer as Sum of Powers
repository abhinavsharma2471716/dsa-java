Given two positive integers n and x.

Return the number of ways n can be expressed as the sum of the xth power of unique positive integers, in other words, the number of sets of unique integers [n1, n2, ..., nk] where n = n1x + n2x + ... + nkx.

Since the result can be very large, return it modulo 109 + 7.

For example, if n = 160 and x = 3, one way to express n is n = 23 + 33 + 53.

 

Example 1:

Input: n = 10, x = 2
Output: 1
Explanation: We can express n as the following: n = 32 + 12 = 10.
It can be shown that it is the only way to express 10 as the sum of the 2nd power of unique integers.
Example 2:

Input: n = 4, x = 1
Output: 2
Explanation: We can express n in the following ways:
- n = 41 = 4.
- n = 31 + 11 = 4.
 

Constraints:

1 <= n <= 300
1 <= x <= 5

Code :

Time Complexity: O(n × m)
where:

n = target sum (remaining values)

m = number of powers ≤ n (≈ n^(1/x))

class Solution {
    private static final int MOD = 1_000_000_007;
    private int[][] memo; // memoization table

    public int numberOfWays(int n, int x) {
        // Precompute all powers <= n
        List<Integer> powers = new ArrayList<>();
        for (int i = 1; Math.pow(i, x) <= n; i++) {
            powers.add((int) Math.pow(i, x)); // cast to int
        }

        memo = new int[n + 1][powers.size()];
        for (int[] row : memo) Arrays.fill(row, -1);

        return dfs(powers, n, 0);
    }

    private int dfs(List<Integer> powers, int remaining, int index) {
        if (remaining == 0) return 1; // found a valid combination
        if (remaining < 0 || index >= powers.size()) return 0;
        if (memo[remaining][index] != -1) return memo[remaining][index];

        // Choice 1: Take this power
        int take = dfs(powers, remaining - powers.get(index), index + 1);
        // Choice 2: Skip this power
        int skip = dfs(powers, remaining, index + 1);

        return memo[remaining][index] = (int) ((take + skip) % MOD);
    }
}


