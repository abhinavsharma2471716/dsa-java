You are given an array nums consisting of positive integers.

We call a subarray of an array complete if the following condition is satisfied:

The number of distinct elements in the subarray is equal to the number of distinct elements in the whole array.
Return the number of complete subarrays.

A subarray is a contiguous non-empty part of an array.

 

Example 1:

Input: nums = [1,3,1,2,2]
Output: 4
Explanation: The complete subarrays are the following: [1,3,1,2], [1,3,1,2,2], [3,1,2] and [3,1,2,2].
Example 2:

Input: nums = [5,5,5,5]
Output: 10
Explanation: The array consists only of the integer 5, so any subarray is complete. The number of subarrays that we can choose is 10.
 

Constraints:

1 <= nums.length <= 1000
1 <= nums[i] <= 2000

Code :

Approach 1 : O(N^2) 

class Solution {
    public int countCompleteSubarrays(int[] nums) {
        int n = nums.length;
        Set<Integer> allDistinct = new HashSet<>();
        for (int num : nums) {
            allDistinct.add(num);
        }
        int totalDistinct = allDistinct.size();

        int count = 0;
        for (int i = 0; i < n; i++) {
            Set<Integer> windowSet = new HashSet<>();
            for (int j = i; j < n; j++) {
                windowSet.add(nums[j]);
                if (windowSet.size() == totalDistinct) {
                    count+= n-j;
                    break;
                }
            }
        }
        return count;
    }
}


Approach 2 : O(N) - Sliding Window

class Solution {
    public int countCompleteSubarrays(int[] nums) {
        int n = nums.length;
        int res = 0;       
        // Step 1: Count total unique elements in the array
        Set<Integer> uniqueSet = new HashSet<>();
        for (int num : nums) {
            uniqueSet.add(num);
        }
        int totalDistinct = uniqueSet.size();
        // Step 2: Sliding window using left and right pointers
        Map<Integer, Integer> freqMap = new HashMap<>();
        int right = 0;
        for (int left = 0; left < n; left++) {
            // Shrink the window from the left
            if (left > 0) {
                int toRemove = nums[left - 1];
                freqMap.put(toRemove, freqMap.get(toRemove) - 1);
                if (freqMap.get(toRemove) == 0) {
                    freqMap.remove(toRemove);
                }
            }
            // Expand the window to the right
            while (right < n && freqMap.size() < totalDistinct) {
                int toAdd = nums[right];
                freqMap.put(toAdd, freqMap.getOrDefault(toAdd, 0) + 1);
                right++;
            }
            // If we found a window with all distinct elements
            if (freqMap.size() == totalDistinct) {
                res += (n - right + 1); // All subarrays starting at left and ending from right to n-1
            }
        }
        return res;
    }
}
