You have n  tiles, where each tile has one letter tiles[i] printed on it.

Return the number of possible non-empty sequences of letters you can make using the letters printed on those tiles.

 

Example 1:

Input: tiles = "AAB"
Output: 8
Explanation: The possible sequences are "A", "B", "AA", "AB", "BA", "AAB", "ABA", "BAA".
Example 2:

Input: tiles = "AAABBC"
Output: 188
Example 3:

Input: tiles = "V"
Output: 1
 

Constraints:

1 <= tiles.length <= 7
tiles consists of uppercase English letters.

Code :

Approach 1 :-

class Solution {
    int n;
    public int numTilePossibilities(String tiles) {
        n = tiles.length();
        boolean[] used = new boolean[n];
        Set<String> result = new HashSet<>();
        StringBuilder curr = new StringBuilder();
        solve(tiles, used, result, curr);
        return result.size() - 1; // Subtract 1 to exclude the empty sequence
    }
    private void solve(String tiles, boolean[] used, Set<String> result, StringBuilder curr) {
        result.add(curr.toString());
        for (int i = 0; i < n; i++) {
            if (used[i])
                continue;
            // Choose the tile at index i
            curr.append(tiles.charAt(i));
            used[i] = true;
            // Explore further with this choice
            solve(tiles, used, result, curr);
            // Backtrack: remove the tile and mark it unused
            used[i] = false;
            curr.deleteCharAt(curr.length() - 1);
        }
    }
}



Approach 2 :

import java.util.*;

class Solution {
    public int numTilePossibilities(String tiles) {
        int[] freq = new int[26]; // Frequency array for letters 'A' to 'Z'
        for (char c : tiles.toCharArray()) {
            freq[c - 'A']++;
        }
        return backtrack(freq);
    }
    
    private int backtrack(int[] freq) {
        int count = 0;
        for (int i = 0; i < 26; i++) {
            if (freq[i] > 0) {
                count++;  // Counting the current sequence
                freq[i]--;  // Use one occurrence of this character
                count += backtrack(freq); // Recursive call for the remaining tiles
                freq[i]++;  // Backtrack: Restore the used tile
            }
        }
        return count;
    }
}
