Given an array of strings nums containing n unique binary strings each of length n, return a binary string of length n that does not appear in nums. If there are multiple answers, you may return any of them.

 

Example 1:

Input: nums = ["01","10"]
Output: "11"
Explanation: "11" does not appear in nums. "00" would also be correct.
Example 2:

Input: nums = ["00","01"]
Output: "11"
Explanation: "11" does not appear in nums. "10" would also be correct.
Example 3:

Input: nums = ["111","011","001"]
Output: "101"
Explanation: "101" does not appear in nums. "000", "010", "100", and "110" would also be correct.
 

Constraints:

n == nums.length
1 <= n <= 16
nums[i].length == n
nums[i] is either '0' or '1'.
All the strings of nums are unique.

Code:

Approach - 1 :


class Solution {
    private String result= "";
    public String findDifferentBinaryString(String[] nums) {
        int n = nums.length;
        Set<String> set = new HashSet<>();
        for(String num : nums){
            set.add(num);
        }
        backtrack(set, new StringBuilder(), n);
        return result;
    }
    private void backtrack(Set<String> set, StringBuilder sb, int n){
        if(sb.length() == n){
            if(!set.contains(sb.toString())){
                result =sb.toString();
            }
            return;
        }
        for(char ch : new char[]{'0','1'}){
            sb.append(ch);
            backtrack(set,sb,n);
            sb.deleteCharAt(sb.length()-1);
        }
        if(!result.isEmpty()){
            return;
        }
    }
}


Approach - 2: Cantor's Diagonal Argument

class Solution {
    public String findDifferentBinaryString(String[] nums) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < nums.length; i++) {
            // Flip the i-th bit of nums[i] to guarantee uniqueness
            sb.append(nums[i].charAt(i) == '0' ? '1' : '0');
        }
        return sb.toString();
    }
}
