You are given a string s of lowercase English letters and a 2D integer array shifts where shifts[i] = [starti, endi, directioni]. For every i, shift the characters in s from the index starti to the index endi (inclusive) forward if directioni = 1, or shift the characters backward if directioni = 0.

Shifting a character forward means replacing it with the next letter in the alphabet (wrapping around so that 'z' becomes 'a'). Similarly, shifting a character backward means replacing it with the previous letter in the alphabet (wrapping around so that 'a' becomes 'z').

Return the final string after all such shifts to s are applied.

 

Example 1:

Input: s = "abc", shifts = [[0,1,0],[1,2,1],[0,2,1]]
Output: "ace"
Explanation: Firstly, shift the characters from index 0 to index 1 backward. Now s = "zac".
Secondly, shift the characters from index 1 to index 2 forward. Now s = "zbd".
Finally, shift the characters from index 0 to index 2 forward. Now s = "ace".

Code :

class Solution {
    public String shiftingLetters(String s, int[][] shifts) {
        int n = s.length();
        int[] delta = new int[n + 1]; // Extra space for end+1       
        // Populate the delta array
        for (int[] shift : shifts) {
            int start = shift[0];
            int end = shift[1];
            int direction = shift[2];
            
            if (direction == 0) {
                delta[start] -= 1; // Left shift
                delta[end + 1] += 1;
            } else {
                delta[start] += 1; // Right shift
                delta[end + 1] -= 1;
            }
        }    
        // Compute the cumulative shift
        int shiftValue = 0;
        char[] result = s.toCharArray();
        for (int i = 0; i < n; i++) {
            shiftValue = (shiftValue + delta[i]) % 26; // Apply cumulative effect
            result[i] = (char) ('a' + (result[i] - 'a' + shiftValue + 26) % 26); // Ensure non-negative
        }      
        return new String(result);
    }
}
