You are given a 0-indexed array of strings words and a 2D array of integers queries.

Each query queries[i] = [li, ri] asks us to find the number of strings present in the range li to ri (both inclusive) of words that start and end with a vowel.

Return an array ans of size queries.length, where ans[i] is the answer to the ith query.

Note that the vowel letters are 'a', 'e', 'i', 'o', and 'u'.

 

Example 1:

Input: words = ["aba","bcb","ece","aa","e"], queries = [[0,2],[1,4],[1,1]]
Output: [2,3,0]
Explanation: The strings starting and ending with a vowel are "aba", "ece", "aa" and "e".
The answer to the query [0,2] is 2 (strings "aba" and "ece").
to query [1,4] is 3 (strings "ece", "aa", "e").
to query [1,1] is 0.
We return [2,3,0].

Code :

class Solution {
    public int[] vowelStrings(String[] words, int[][] queries) {
        int n = queries.length;
        Set<Character> set = new HashSet<>();
        set.add('a');
        set.add('e');
        set.add('i');
        set.add('o');
        set.add('u');
        Map<Integer,Integer> map = new HashMap<>();
        int sum =0;
        int k =0;
        for(String word : words){
          if(set.contains(word.charAt(0)) && set.contains(word.charAt(word.length() - 1))){
            sum++;
          }
          map.put(k,sum);
          k++;
        }
        int[] result = new int[n];
        for(int i=0;i<n;i++){
            int[] query = queries[i];
            result[i] = map.get(query[1]) - (query[0] -1 >= 0 ? map.get(query[0] -1) :0);
        }
        return result;
    }
}
