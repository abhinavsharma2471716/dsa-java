Given an integer array nums, find the maximum possible bitwise OR of a subset of nums and return the number of different non-empty subsets with the maximum bitwise OR.

An array a is a subset of an array b if a can be obtained from b by deleting some (possibly zero) elements of b. Two subsets are considered different if the indices of the elements chosen are different.

The bitwise OR of an array a is equal to a[0] OR a[1] OR ... OR a[a.length - 1] (0-indexed).

 

Example 1:

Input: nums = [3,1]
Output: 2
Explanation: The maximum possible bitwise OR of a subset is 3. There are 2 subsets with a bitwise OR of 3:
- [3]
- [3,1]
Example 2:

Input: nums = [2,2,2]
Output: 7
Explanation: All non-empty subsets of [2,2,2] have a bitwise OR of 2. There are 23 - 1 = 7 total subsets.
Example 3:

Input: nums = [3,2,1,5]
Output: 6
Explanation: The maximum possible bitwise OR of a subset is 7. There are 6 subsets with a bitwise OR of 7:
- [3,5]
- [3,1,5]
- [3,2,5]
- [3,2,1,5]
- [2,5]
- [2,1,5]
 

Constraints:

1 <= nums.length <= 16
1 <= nums[i] <= 105


Code :

class Solution {
    public int countMaxOrSubsets(int[] nums) {
        // Step 1: Compute the maximum possible OR by considering the OR of all elements
        int maxOr = 0;
        for (int num : nums) {
            maxOr |= num;
        }
        
        // Step 2: Use a recursive function to explore all subsets and count those with the maximum OR
        return countSubsets(nums, 0, 0, maxOr);
    }
    
    // Recursive function to count the subsets with OR equal to maxOr
    private int countSubsets(int[] nums, int index, int currentOr, int maxOr) {
        // If we've considered all elements
        if (index == nums.length) {
            return currentOr == maxOr ? 1 : 0;
        }
        
        // Step 3: Recursive case, explore two possibilities
        // 1. Include nums[index] in the current subset (OR with current)
        int include = countSubsets(nums, index + 1, currentOr | nums[index], maxOr);
        
        // 2. Exclude nums[index] from the current subset
        int exclude = countSubsets(nums, index + 1, currentOr, maxOr);
        
        // Return the total count of subsets that match the maximum OR
        return include + exclude;
    }
}
