Given an integer n, return true if it is a power of four. Otherwise, return false.

An integer n is a power of four, if there exists an integer x such that n == 4x.

 

Example 1:

Input: n = 16
Output: true
Example 2:

Input: n = 5
Output: false
Example 3:

Input: n = 1
Output: true
 

Constraints:

-231 <= n <= 231 - 1
 

Follow up: Could you solve it without loops/recursion?


Code:

Appraoch 1: // O(log₄ n) time, O(1) space

class Solution {
    public boolean isPowerOfFour(int n) {
        if (n <= 0) return false;
        while (n % 4 == 0) {
            n /= 4;
        }
        return n == 1;
    }
}

Appraoch 2: // O(log₄ n) time, O(log₄ n) space (recursion stack)

class Solution {
    public boolean isPowerOfFour(int n) {
        if(n == 1) return true;
        if ( n <= 0 || (n % 4) != 0 ) return false;     
        return isPowerOfFour(n/4);
    }
}

Appraoch 3: // O(1) time, O(1) space

class Solution {
    public boolean isPowerOfFour(int n) {
        return n > 0 &&
               (Math.log(n) / Math.log(4) % 1 == 0);
    }
}


Appraoch 4: // O(1) time, O(1) space

class Solution {
    public boolean isPowerOfFour(int n) {
        return n > 0 &&
              (n & (n - 1)) == 0 &&   // power of two
               (n & 0x55555555) != 0;  // bit at even position
    }
}



