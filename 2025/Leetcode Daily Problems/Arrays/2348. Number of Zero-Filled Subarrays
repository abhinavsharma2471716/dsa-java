Given an integer array nums, return the number of subarrays filled with 0.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,3,0,0,2,0,0,4]
Output: 6
Explanation: 
There are 4 occurrences of [0] as a subarray.
There are 2 occurrences of [0,0] as a subarray.
There is no occurrence of a subarray with a size more than 2 filled with 0. Therefore, we return 6.
Example 2:

Input: nums = [0,0,0,2,0,0]
Output: 9
Explanation:
There are 5 occurrences of [0] as a subarray.
There are 3 occurrences of [0,0] as a subarray.
There is 1 occurrence of [0,0,0] as a subarray.
There is no occurrence of a subarray with a size more than 3 filled with 0. Therefore, we return 9.
Example 3:

Input: nums = [2,10,2019]
Output: 0
Explanation: There is no subarray filled with 0. Therefore, we return 0.
 

Constraints:

1 <= nums.length <= 105
-109 <= nums[i] <= 109

Code :

Approach 1 :(Sliding Window - O(n)

class Solution {
    public long zeroFilledSubarray(int[] nums) {
        long count = 0;
        int n = nums.length;
        int right;

        for (int left = 0; left < n; left++) {
            if (nums[left] != 0) continue;

            right = left;
            // Expand the zero-run
            while (right < n && nums[right] == 0) {
                count += right - left + 1; // count all subarrays ending at 'right'
                right++;
            }
            left = right - 1; // skip ahead, since we've already processed this run
        }
        return count;
    }
}


Approach 2 - (Streak - o(n))

class Solution {
    public long zeroFilledSubarray(int[] nums) {
        long count = 0;
        long streak = 0;  // track continuous zeros

        for (int num : nums) {
            if (num == 0) {
                streak++;
                count += streak;  // each new zero extends all previous subarrays
            } else {
                streak = 0;
            }
        }
        return count;
    }
}
