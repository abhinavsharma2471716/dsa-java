You are given an integer n which represents an array nums containing the numbers from 1 to n in order. Additionally, you are given a 2D array conflictingPairs, where conflictingPairs[i] = [a, b] indicates that a and b form a conflicting pair.

Remove exactly one element from conflictingPairs. Afterward, count the number of non-empty subarrays of nums which do not contain both a and b for any remaining conflicting pair [a, b].

Return the maximum number of subarrays possible after removing exactly one conflicting pair.

 

Example 1:

Input: n = 4, conflictingPairs = [[2,3],[1,4]]

Output: 9

Explanation:

Remove [2, 3] from conflictingPairs. Now, conflictingPairs = [[1, 4]].
There are 9 subarrays in nums where [1, 4] do not appear together. They are [1], [2], [3], [4], [1, 2], [2, 3], [3, 4], [1, 2, 3] and [2, 3, 4].
The maximum number of subarrays we can achieve after removing one element from conflictingPairs is 9.
Example 2:

Input: n = 5, conflictingPairs = [[1,2],[2,5],[3,5]]

Output: 12

Explanation:

Remove [1, 2] from conflictingPairs. Now, conflictingPairs = [[2, 5], [3, 5]].
There are 12 subarrays in nums where [2, 5] and [3, 5] do not appear together.
The maximum number of subarrays we can achieve after removing one element from conflictingPairs is 12.
 

Constraints:

2 <= n <= 105
1 <= conflictingPairs.length <= 2 * n
conflictingPairs[i].length == 2
1 <= conflictingPairs[i][j] <= n
conflictingPairs[i][0] != conflictingPairs[i][1]

Code : T.C - O(n+ m)

class Solution {
    public long maxSubarrays(int n, int[][] conflictingPairs) {
        long totalValidSubarrays = 0;

        // conflictingPoints[i] = list of points which conflict with i
        List<List<Integer>> conflictingPoints = new ArrayList<>();
        for (int i = 0; i <= n; i++) {
            conflictingPoints.add(new ArrayList<>());
        }

        // Build the conflicting points list
        for (int[] pair : conflictingPairs) {
            int start = Math.min(pair[0], pair[1]);
            int end = Math.max(pair[0], pair[1]);
            conflictingPoints.get(end).add(start);
        }

        int highestConflictPoint = 0;      // Max conflicting point so far
        int secondHighestConflictPoint = 0; // Second max conflicting point

        // extraSubarrays[i] = number of extra subarrays by removing the conflicting point i
        long[] extraSubarrays = new long[n + 1];

        // Process each endpoint of subarrays
        for (int end = 1; end <= n; end++) {
            // Update max and second max conflict points
            for (int conflictPoint : conflictingPoints.get(end)) {
                if (conflictPoint >= highestConflictPoint) {
                    secondHighestConflictPoint = highestConflictPoint;
                    highestConflictPoint = conflictPoint;
                } else if (conflictPoint > secondHighestConflictPoint) {
                    secondHighestConflictPoint = conflictPoint;
                }
            }

            // Count valid subarrays ending at 'end'
            totalValidSubarrays += end - highestConflictPoint;

            // Calculate extra subarrays possible by removing the highest conflict
            extraSubarrays[highestConflictPoint] += highestConflictPoint - secondHighestConflictPoint;
        }

        // Find maximum possible extra subarrays
        long maxExtraSubarrays = 0;
        for (long value : extraSubarrays) {
            if (value > maxExtraSubarrays) {
                maxExtraSubarrays = value;
            }
        }

        return totalValidSubarrays + maxExtraSubarrays;
    }
}
