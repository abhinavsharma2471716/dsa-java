Given an integer n, return true if it is a power of three. Otherwise, return false.

An integer n is a power of three, if there exists an integer x such that n == 3x.

 

Example 1:

Input: n = 27
Output: true
Explanation: 27 = 33
Example 2:

Input: n = 0
Output: false
Explanation: There is no x where 3x = 0.
Example 3:

Input: n = -1
Output: false
Explanation: There is no x where 3x = (-1).
 

Constraints:

-2^31 <= n <= 2^31 - 1


Follow up: Could you solve it without loops/recursion?

Code:

Approach 1: O(log(base3)N)

class Solution {
    public boolean isPowerOfThree(int n) {
        if (n <= 0) return false; // negative or zero can't be powers of three
        while (n % 3 == 0) { // only divide if perfectly divisible
            n /= 3;
        }
        return n == 1; // must end up as exactly 1
    }
}

Approach 2: O(log(base3)N)

class Solution {
    public boolean isPowerOfThree(int n) {
        if (n == 1) return true;
        if (n <= 0 || n % 3 != 0) return false; // must be divisible by 3
        return isPowerOfThree(n / 3);
    }
}

Approach 3: O(1)

class Solution {
    public boolean isPowerOfThree(int n) {
        System.out.println((long) Math.pow(2, 31));
        System.out.println((long) Math.pow(3, 19));
        System.out.println((long) Math.pow(3, 20));
        System.out.println((long) Math.pow(3, 21));
          return n > 0 && 1162261467 % n == 0; 
    }
}

