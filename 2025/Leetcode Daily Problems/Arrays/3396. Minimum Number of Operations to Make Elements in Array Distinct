
You are given an integer array nums. You need to ensure that the elements in the array are distinct. To achieve this, you can perform the following operation any number of times:

Remove 3 elements from the beginning of the array. If the array has fewer than 3 elements, remove all remaining elements.
Note that an empty array is considered to have distinct elements. Return the minimum number of operations needed to make the elements in the array distinct.

 

Example 1:

Input: nums = [1,2,3,4,2,3,3,5,7]

Output: 2

Explanation:

In the first operation, the first 3 elements are removed, resulting in the array [4, 2, 3, 3, 5, 7].
In the second operation, the next 3 elements are removed, resulting in the array [3, 5, 7], which has distinct elements.
Therefore, the answer is 2.

Example 2:

Input: nums = [4,5,6,4,4]

Output: 2

Explanation:

In the first operation, the first 3 elements are removed, resulting in the array [4, 4].
In the second operation, all remaining elements are removed, resulting in an empty array.
Therefore, the answer is 2.

Example 3:

Input: nums = [6,7,8,9]

Output: 0

Explanation:

The array already contains distinct elements. Therefore, the answer is 0.

 

Constraints:

1 <= nums.length <= 100
1 <= nums[i] <= 100

Code :

import java.util.HashSet;

class Solution {
    public int minimumOperations(int[] nums) {
        // Step 1: Use a HashSet to check if the array is already distinct
        HashSet<Integer> uniqueElements = new HashSet<>();
        for (int num : nums) {
            uniqueElements.add(num);
        }
        if (uniqueElements.size() == nums.length) {
            return 0; // Array is already distinct
        }
        
        // Step 2: Initialize variables for tracking operations
        int operations = 0;
        int startIndex = 0;
        
        // Step 3: Continue removing groups of 3 until the array becomes distinct
        while (startIndex < nums.length) {
            // Remove up to 3 elements starting from the current index
            int removeCount = Math.min(3, nums.length - startIndex);
            startIndex += removeCount;
            operations++;
            
            // Check the remaining array for duplicates
            uniqueElements.clear();
            for (int i = startIndex; i < nums.length; i++) {
                uniqueElements.add(nums[i]);
            }
            if (uniqueElements.size() == nums.length - startIndex) {
                break; // Remaining array is distinct
            }
        }
        
        return operations;
    }
}


Approach 2:

The question requires executing operations to ensure the remaining elements in the array are distinct. The most direct method is to skip 3 elements from the beginning of the array each time and check for any remaining duplicate elements. We can use a hash map to detect if there are any duplicate elements in the array.

class Solution {

    public int minimumOperations(int[] nums) {
        int ans = 0;
        for (int i = 0; i < nums.length; i += 3, ans++) {
            if (checkUnique(nums, i)) {
                return ans;
            }
        }
        return ans;
    }

    private boolean checkUnique(int[] nums, int start) {
        HashSet<Integer> cnt = new HashSet<>();
        for (int i = start; i < nums.length; i++) {
            if (cnt.contains(nums[i])) {
                return false;
            }
            cnt.add(nums[i]);
        }
        return true;
    }
}

Approach 3:

If the repeated element x appears at indices i and j with i<j, then all elements before index i must be removed. This reduces the problem to finding the longest suffix of the array in which all elements are distinct. Since each time it is necessary to remove 3 elements, to remove all elements before index i, i.e., nums[0⋯i], at least ⌊i+1⌋/3 = ⌊i/3⌋ +1  removal operations are required.

If the array length is n, we traverse it in reverse order, using seen to record the elements that have already appeared. When we reach the first duplicate element nums[i], it indicates that the element already exists in the current suffix. We then return the minimum number of operations: ⌊i / 3⌋ + 1;. If there are no duplicate elements in the array, we return 0.

class Solution {

    public int minimumOperations(int[] nums) {
        boolean[] seen = new boolean[128];
        for (int i = nums.length - 1; i >= 0; i--) {
            if (seen[nums[i]]) {
                return i / 3 + 1;
            }
            seen[nums[i]] = true;
        }
        return 0;
    }
}
