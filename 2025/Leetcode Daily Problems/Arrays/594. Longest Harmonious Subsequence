We define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly 1.

Given an integer array nums, return the length of its longest harmonious subsequence among all its possible subsequences.

 

Example 1:

Input: nums = [1,3,2,2,5,2,3,7]

Output: 5

Explanation:

The longest harmonious subsequence is [3,2,2,2,3].

Example 2:

Input: nums = [1,2,3,4]

Output: 2

Explanation:

The longest harmonious subsequences are [1,2], [2,3], and [3,4], all of which have a length of 2.

Example 3:

Input: nums = [1,1,1,1]

Output: 0

Explanation:

No harmonic subsequence exists.

 

Constraints:

1 <= nums.length <= 2 * 10^4
-109 <= nums[i] <= 109

Code :

Approach 1 :

Sorting + Two Pointer (Sliding Window) – Time Complexity: O(n log n)

class Solution {
    public int findLHS(int[] nums) {
        Arrays.sort(nums);
        int left = 0, maxLen = 0;
        
        for (int right = 0; right < nums.length; right++) {
            while (nums[right] - nums[left] > 1) {
                left++;
            }
            if (nums[right] - nums[left] == 1) {
                maxLen = Math.max(maxLen, right - left + 1);
            }
        }
        
        return maxLen;
    }
}


Approach 2 : HashMap Frequency Count – Time Complexity: O(n)


class Solution {
    public int findLHS(int[] nums) {
        Map<Integer, Integer> freqMap = new HashMap<>();
        int maxLen = 0;
        
        // Count frequency of each element
        for (int num : nums) {
            freqMap.put(num, freqMap.getOrDefault(num, 0) + 1);
        }
        
        // Check for pairs (x, x+1)
        for (int key : freqMap.keySet()) {
            if (freqMap.containsKey(key + 1)) {
                int currentLen = freqMap.get(key) + freqMap.get(key + 1);
                maxLen = Math.max(maxLen, currentLen);
            }
        }
        
        return maxLen;
    }
}

