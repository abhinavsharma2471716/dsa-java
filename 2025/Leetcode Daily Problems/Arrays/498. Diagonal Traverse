Given an m x n matrix mat, return an array of all the elements of the array in a diagonal order.

 

Example 1:


Input: mat = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,4,7,5,3,6,8,9]
Example 2:

Input: mat = [[1,2],[3,4]]
Output: [1,2,3,4]
 

Constraints:

m == mat.length
n == mat[i].length
1 <= m, n <= 104
1 <= m * n <= 104
-10^5 <= mat[i][j] <= 10^5


Code :

class Solution {
    public int[] findDiagonalOrder(int[][] mat) {
        int m = mat.length, n = mat[0].length;
        Map<Integer, List<Integer>> map = new HashMap<>();
        // Step 1: Group elements by diagonal key (i + j)
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int key = i + j;
                map.putIfAbsent(key, new ArrayList<>());
                map.get(key).add(mat[i][j]);
            }
        }
        // Step 2: Build result
        int[] result = new int[m * n];
        int index = 0;
        for (int k = 0; k < m + n - 1; k++) {
            List<Integer> list = map.get(k);
            // Reverse order for even diagonals
            if (k % 2 == 0) {
                Collections.reverse(list);
            }
            for (int num : list) {
                result[index++] = num;
            }
        }
        return result;
    }
}
