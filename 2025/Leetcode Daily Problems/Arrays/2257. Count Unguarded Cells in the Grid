You are given two integers m and n representing a 0-indexed m x n grid. You are also given two 2D integer arrays guards and walls where guards[i] = [rowi, coli] and walls[j] = [rowj, colj] represent the positions of the ith guard and jth wall respectively.

A guard can see every cell in the four cardinal directions (north, east, south, or west) starting from their position unless obstructed by a wall or another guard. A cell is guarded if there is at least one guard that can see it.

Return the number of unoccupied cells that are not guarded.

 

Example 1:


Input: m = 4, n = 6, guards = [[0,0],[1,1],[2,3]], walls = [[0,1],[2,2],[1,4]]
Output: 7
Explanation: The guarded and unguarded cells are shown in red and green respectively in the above diagram.
There are a total of 7 unguarded cells, so we return 7.
Example 2:


Input: m = 3, n = 3, guards = [[1,1]], walls = [[0,1],[1,0],[2,1],[1,2]]
Output: 4
Explanation: The unguarded cells are shown in green in the above diagram.
There are a total of 4 unguarded cells, so we return 4.
 

Constraints:

1 <= m, n <= 10^5
2 <= m * n <= 10^5
1 <= guards.length, walls.length <= 5 * 10^4
2 <= guards.length + walls.length <= m * n
guards[i].length == walls[j].length == 2
0 <= rowi, rowj < m
0 <= coli, colj < n
All the positions in guards and walls are unique.




Code:

class Solution {
    // Helper method to mark guarded cells in one direction
    public void helper(int[][] result, int i, int j, int di, int dj, int m, int n) {
        while (i >= 0 && i < m && j >= 0 && j < n) {
            if (result[i][j] == 3 || result[i][j] == 2) { // Stop at walls or guards
                break;
            }
            if (result[i][j] == 0) { // Mark as guarded if unvisited
                result[i][j] = 1;
            }
            i += di;
            j += dj;
        }
    }

    public int countUnguarded(int m, int n, int[][] guards, int[][] walls) {
        int[][] result = new int[m][n];
        
        // Place guards (mark as 2)
        for (int[] guard : guards) {
            int row = guard[0];
            int col = guard[1];
            result[row][col] = 2;
        }

        // Place walls (mark as 3)
        for (int[] wall : walls) {
            int row = wall[0];
            int col = wall[1];
            result[row][col] = 3;
        }

        // Mark cells guarded by guards
        for (int[] guard : guards) {
            int row = guard[0];
            int col = guard[1];
            // Guard in all 4 directions
            helper(result, row - 1, col, -1, 0, m, n); // Up
            helper(result, row + 1, col, 1, 0, m, n);  // Down
            helper(result, row, col - 1, 0, -1, m, n); // Left
            helper(result, row, col + 1, 0, 1, m, n);  // Right
        }

        // Count unguarded cells
        int unguardedCount = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (result[i][j] == 0) { // Unvisited cells are unguarded
                    unguardedCount++;
                }
            }
        }
        return unguardedCount;
    }
}



