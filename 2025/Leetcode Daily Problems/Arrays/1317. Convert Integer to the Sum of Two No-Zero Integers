No-Zero integer is a positive integer that does not contain any 0 in its decimal representation.

Given an integer n, return a list of two integers [a, b] where:

a and b are No-Zero integers.
a + b = n
The test cases are generated so that there is at least one valid solution. If there are many valid solutions, you can return any of them.

 

Example 1:

Input: n = 2
Output: [1,1]
Explanation: Let a = 1 and b = 1.
Both a and b are no-zero integers, and a + b = 2 = n.
Example 2:

Input: n = 11
Output: [2,9]
Explanation: Let a = 2 and b = 9.
Both a and b are no-zero integers, and a + b = 11 = n.
Note that there are other valid answers as [8, 3] that can be accepted.
 

Constraints:

2 <= n <= 104
 
Code :

Approach 1 : T.C. - O( n Log n )

class Solution {
    public int[] getNoZeroIntegers(int n) {
        for(int A=1;A<n;A++ ){
            int B= n-A;
            if(!String.valueOf(A).contains("0") && !String.valueOf(B).contains("0")){
                 return new int[]{A, B};
            }
        }
        return new int[]{};
    }
}


Approach 2 : T.C. - O( n Log n )

class Solution {
    public int[] getNoZeroIntegers(int n) {
        for (int A = 1; A < n; A++) {
            int B = n - A;
            if (!hasZero(A) && !hasZero(B)) {
                return new int[]{A, B};
            }
        }
        return new int[]{};
    }

    private boolean hasZero(int x) {
        while (x > 0) {
            if (x % 10 == 0) return true;
            x /= 10;
        }
        return false;
    }
}
