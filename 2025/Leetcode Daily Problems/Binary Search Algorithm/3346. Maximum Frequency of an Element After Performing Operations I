You are given an integer array nums and two integers k and numOperations.

You must perform an operation numOperations times on nums, where in each operation you:

Select an index i that was not selected in any previous operations.
Add an integer in the range [-k, k] to nums[i].
Return the maximum possible frequency of any element in nums after performing the operations.

 

Example 1:

Input: nums = [1,4,5], k = 1, numOperations = 2

Output: 2

Explanation:

We can achieve a maximum frequency of two by:

Adding 0 to nums[1]. nums becomes [1, 4, 5].
Adding -1 to nums[2]. nums becomes [1, 4, 4].
Example 2:

Input: nums = [5,11,20,20], k = 5, numOperations = 1

Output: 2

Explanation:

We can achieve a maximum frequency of two by:

Adding 0 to nums[1].
 

Constraints:

1 <= nums.length <= 10^5
1 <= nums[i] <= 10^5
0 <= k <= 10^5
0 <= numOperations <= nums.length

Code: //O(n log n + n + r log n)

class Solution {
    public int maxFrequency(int[] nums, int k, int numOperations) {
        Arrays.sort(nums);
        int n = nums.length;
        int ans = 0;
        // Step 1: Build frequency map for existing numbers
        Map<Integer, Integer> freq = new HashMap<>();
        for (int num : nums) {
            freq.put(num, freq.getOrDefault(num, 0) + 1);
            ans = Math.max(ans, freq.get(num)); // track the max frequency so far
        }
        // Step 2: Try every integer in range [min, max]
        for (int target = nums[0]; target <= nums[n - 1]; target++) {
            int left = lowerBound(nums, target - k);
            int right = upperBound(nums, target + k) - 1;

            int countInRange = right - left + 1;
            int baseFreq = freq.getOrDefault(target, 0);
            int possible = Math.min(countInRange, baseFreq + numOperations);
            ans = Math.max(ans, possible);
        }
        return ans;
    }
    // First index >= value
    private int lowerBound(int[] nums, int value) {
        int l = 0, r = nums.length;
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (nums[mid] < value)
                l = mid + 1;
            else
                r = mid;
        }
        return l;
    }
    // First index > value
    private int upperBound(int[] nums, int value) {
        int l = 0, r = nums.length;
        while (l < r) {
            int mid = l + (r - l) / 2;
            if (nums[mid] <= value)
                l = mid + 1;
            else
                r = mid;
        }
        return l;
    }
}


