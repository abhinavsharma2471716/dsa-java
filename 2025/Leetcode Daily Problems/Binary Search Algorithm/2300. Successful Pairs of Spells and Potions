You are given two positive integer arrays spells and potions, of length n and m respectively, where spells[i] represents the strength of the ith spell and potions[j] represents the strength of the jth potion.

You are also given an integer success. A spell and potion pair is considered successful if the product of their strengths is at least success.

Return an integer array pairs of length n where pairs[i] is the number of potions that will form a successful pair with the ith spell.

 

Example 1:

Input: spells = [5,1,3], potions = [1,2,3,4,5], success = 7
Output: [4,0,3]
Explanation:
- 0th spell: 5 * [1,2,3,4,5] = [5,10,15,20,25]. 4 pairs are successful.
- 1st spell: 1 * [1,2,3,4,5] = [1,2,3,4,5]. 0 pairs are successful.
- 2nd spell: 3 * [1,2,3,4,5] = [3,6,9,12,15]. 3 pairs are successful.
Thus, [4,0,3] is returned.
Example 2:

Input: spells = [3,1,2], potions = [8,5,8], success = 16
Output: [2,0,2]
Explanation:
- 0th spell: 3 * [8,5,8] = [24,15,24]. 2 pairs are successful.
- 1st spell: 1 * [8,5,8] = [8,5,8]. 0 pairs are successful. 
- 2nd spell: 2 * [8,5,8] = [16,10,16]. 2 pairs are successful. 
Thus, [2,0,2] is returned.
 

Constraints:

n == spells.length
m == potions.length
1 <= n, m <= 10^5
1 <= spells[i], potions[i] <= 10^5
1 <= success <= 10^10

Code :

class Solution {
    public int[] successfulPairs(int[] spells, int[] potions, long success) {
        Arrays.sort(potions);
        int n = spells.length;
        int m = potions.length;
        int[] result = new int[n];
        
        for (int i = 0; i < n; i++) {
            long spell = spells[i];
            // Minimum potion strength required
           // long minPotion = (success + spell - 1) / spell; // ceiling division
            long minPotion = (long)Math.ceil((double)success / spell);
            
            // Binary search for first potion >= minPotion
            int index = binarySearch(potions, minPotion);
            
            // Number of successful pairs = remaining potions
            result[i] = m - index;
        }
        return result;
    }

    // Find the first index where potion >= minPotion
    private int binarySearch(int[] potions, long minPotion) {
        int low = 0, high = potions.length - 1;
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (potions[mid] < minPotion) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return low;
    }
}


Notes:

The time complexity of this solution is O((n + m) log m), where n is the number of spells and m is the number of potions. Sorting the potions array initially takes O(m log m) time. Then, for each spell, the algorithm performs a binary search on the sorted potions array to find the smallest potion that forms a successful pair, which takes O(log m) time per spell. Since this binary search runs for all n spells, it contributes O(n log m). Combining both steps gives a total time complexity of O((n + m) log m), and the space complexity is O(n) for the result array.
