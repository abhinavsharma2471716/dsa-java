You have n tasks and m workers. Each task has a strength requirement stored in a 0-indexed integer array tasks, with the ith task requiring tasks[i] strength to complete. The strength of each worker is stored in a 0-indexed integer array workers, with the jth worker having workers[j] strength. Each worker can only be assigned to a single task and must have a strength greater than or equal to the task's strength requirement (i.e., workers[j] >= tasks[i]).

Additionally, you have pills magical pills that will increase a worker's strength by strength. You can decide which workers receive the magical pills, however, you may only give each worker at most one magical pill.

Given the 0-indexed integer arrays tasks and workers and the integers pills and strength, return the maximum number of tasks that can be completed.

 

Example 1:

Input: tasks = [3,2,1], workers = [0,3,3], pills = 1, strength = 1
Output: 3
Explanation:
We can assign the magical pill and tasks as follows:
- Give the magical pill to worker 0.
- Assign worker 0 to task 2 (0 + 1 >= 1)
- Assign worker 1 to task 1 (3 >= 2)
- Assign worker 2 to task 0 (3 >= 3)
Example 2:

Input: tasks = [5,4], workers = [0,0,0], pills = 1, strength = 5
Output: 1
Explanation:
We can assign the magical pill and tasks as follows:
- Give the magical pill to worker 0.
- Assign worker 0 to task 0 (0 + 5 >= 5)
Example 3:

Input: tasks = [10,15,30], workers = [0,10,10,10,10], pills = 3, strength = 10
Output: 2
Explanation:
We can assign the magical pills and tasks as follows:
- Give the magical pill to worker 0 and worker 1.
- Assign worker 0 to task 0 (0 + 10 >= 10)
- Assign worker 1 to task 1 (10 + 10 >= 15)
The last pill is not given because it will not make any worker strong enough for the last task.
 

Constraints:

n == tasks.length
m == workers.length
1 <= n, m <= 5 * 104
0 <= pills <= m
0 <= tasks[i], workers[j], strength <= 109

Code :

class Solution {
    public int maxTaskAssign(int[] tasks, int[] workers, int pills, int strength) {
        Arrays.sort(tasks); // Sort tasks in ascending order
        Arrays.sort(workers); // Sort workers in ascending order
        int n = tasks.length, m = workers.length;
        int left = 1, right = Math.min(m, n), ans = 0;

        // Binary Search to maximize the number of tasks assigned
        while (left <= right) {
            int mid = (left + right) / 2;
            System.out.println("Checking for mid = " + mid); // Debugging statement
            if (check(tasks, workers, pills, strength, mid)) {
                ans = mid;
                left = mid + 1;
                System.out.println("Can assign " + mid + " tasks. Updating ans to " + ans);
            } else {
                right = mid - 1;
                System.out.println("Cannot assign " + mid + " tasks. Updating right to " + right);
            }
        }
        System.out.println("Final answer: " + ans); // Debugging final result
        return ans;
    }

    private boolean check(int[] tasks, int[] workers, int pills, int strength, int mid) {
        int p = pills;
        TreeMap<Integer, Integer> ws = new TreeMap<>();

        // Add the top "mid" workers to the TreeMap
        for (int i = workers.length - mid; i < workers.length; ++i) {
            ws.put(workers[i], ws.getOrDefault(workers[i], 0) + 1);
        }
        System.out.println("Workers available: " + ws); // Debugging statement

        // Iterate over the tasks we want to assign
        for (int i = mid - 1; i >= 0; --i) {
            System.out.println("Assigning task " + tasks[i] + " to worker."); // Debugging task assignment
            Integer key = ws.lastKey(); // Get the worker with the maximum value

            if (key >= tasks[i]) {
                // No need for pills if the worker can complete the task
                System.out.println("Worker " + key + " can complete task " + tasks[i] + " without a pill.");
                ws.put(key, ws.get(key) - 1);
                if (ws.get(key) == 0) ws.remove(key);
            } else {
                // If no worker can complete without a pill, we need to use the pill
                if (p == 0) {
                    System.out.println("Out of pills. Cannot assign task " + tasks[i] + ".");
                    return false;
                }
                key = ws.ceilingKey(tasks[i] - strength); // Check if any worker can complete with a pill
                if (key == null) {
                    System.out.println("No worker can complete task " + tasks[i] + " even with a pill.");
                    return false;
                }
                System.out.println("Worker " + key + " can complete task " + tasks[i] + " with a pill.");
                ws.put(key, ws.get(key) - 1);
                if (ws.get(key) == 0) ws.remove(key);
                --p; // Use up a pill
            }
        }
        return true; // All tasks assigned successfully
    }
}
