You are given a directed graph of n nodes numbered from 0 to n - 1, where each node has at most one outgoing edge.

The graph is represented with a given 0-indexed array edges of size n, indicating that there is a directed edge from node i to node edges[i]. If there is no outgoing edge from i, then edges[i] == -1.

You are also given two integers node1 and node2.

Return the index of the node that can be reached from both node1 and node2, such that the maximum between the distance from node1 to that node, and from node2 to that node is minimized. If there are multiple answers, return the node with the smallest index, and if no possible answer exists, return -1.

Note that edges may contain cycles.

 

Example 1:


Input: edges = [2,2,3,-1], node1 = 0, node2 = 1
Output: 2
Explanation: The distance from node 0 to node 2 is 1, and the distance from node 1 to node 2 is 1.
The maximum of those two distances is 1. It can be proven that we cannot get a node with a smaller maximum distance than 1, so we return node 2.
Example 2:


Input: edges = [1,2,-1], node1 = 0, node2 = 2
Output: 2
Explanation: The distance from node 0 to node 2 is 2, and the distance from node 2 to itself is 0.
The maximum of those two distances is 2. It can be proven that we cannot get a node with a smaller maximum distance than 2, so we return node 2.
 

Constraints:

n == edges.length
2 <= n <= 105
-1 <= edges[i] < n
edges[i] != i
0 <= node1, node2 < n


Code :

Approach 1 : BFS

We can see intuitively that if we have the distances from node1 and node2 to all the nodes, then we can iterate over all the nodes and choose a node that has the smallest maximum value between the distances from node1 to that node and from node2 to that node.

A breadth-first search (BFS) is a good algorithm to use if we want to find the shortest path in an unweighted graph. The path used in BFS traversal always has the least number of edges. The BFS algorithm does a level-wise iteration of the graph. As a result, it first finds all paths that are one edge away from the source node, followed by all paths that are two edges away from the source node, and so on. This allows BFS to find the shortest path in terms of steps from the source node to any other node. It is implemented with a queue.

In this approach, we begin BFS traversals for both node1 and node2 to compute the shortest distances from node1 and node2 to all other nodes. We store the results in arrays labeled dist1 and dist2, respectively. We also set two variables: minDistNode = -1, which is the answer to our problem, and minDistTillNow, which is the maximum between the distances from node1 to minDistNode and from node2 to minDistNode.

Now, we iterate over all of the nodes from 0 to n - 1. For each node, say currNode we check if the maximum distance from node1 and node2 is smaller than the other nodes previously seen. If minDistTillNow > max(dist1[currNode], dist2[currNode]), we have a node currNode with a smaller maximum value between the distances from node1 to currNode and from node2 to currNode. In this case, we update the minDistTillNow to minDistTillNow = max(dist1[currNode], dist2[currNode]) and update the minDistNode to minDistNode = currNode.

Otherwise, if minDistTillNow <= max(dist1[currNode], dist2[currNode]) we do not do anything. We return minDistNode at the end of all the iterations over every node. We would never update the variable currNode if we couldn't reach any node that is reachable from node1 and node2. In that case, we'd return the currNode variable with its original value of -1.

class Solution {
    public void bfs(int startNode, int[] edges, int[] dist) {
        int n = edges.length;
        Queue<Integer> q = new LinkedList<>();
        q.offer(startNode);

        Boolean[] visit = new Boolean[n];
        Arrays.fill(visit, Boolean.FALSE);
        dist[startNode] = 0;

        while (!q.isEmpty()) {
            int node = q.poll();

            if (visit[node]) {
                continue;
            }

            visit[node] = true;
            int neighbor = edges[node];
            if (neighbor != -1 && !visit[neighbor]) {
                dist[neighbor] = 1 + dist[node];
                q.offer(neighbor);
            }

        }
    }

    public int closestMeetingNode(int[] edges, int node1, int node2) {
        int n = edges.length;
        int[] dist1 = new int[n], dist2 = new int[n];
        Arrays.fill(dist1, Integer.MAX_VALUE);
        Arrays.fill(dist2, Integer.MAX_VALUE);

        bfs(node1, edges, dist1);
        bfs(node2, edges, dist2);

        int minDistNode = -1, minDistTillNow = Integer.MAX_VALUE;
        for (int currNode = 0; currNode < n; currNode++) {
            if (minDistTillNow > Math.max(dist1[currNode], dist2[currNode])) {
                minDistNode = currNode;
                minDistTillNow = Math.max(dist1[currNode], dist2[currNode]);
            }
        }

        return minDistNode;
    }
}


Approach 2 : DFS


An interesting property of the graph mentioned in the problem is that each node can have at most one outgoing edge. We can see intuitively that if every node has at most one outgoing edge, there can only be one path from a node to any other node. This is because we only have one way to proceed from one node to another node by using the outgoing edge, if one exists. If there is no outgoing edge or the node has a self-loop (an edge that connects a node to itself), we cannot move ahead. So, if we are able to move, we can only move in one direction. Due to this property, we would be able to use the depth-first search (DFS) algorithm to find the shortest path from a node to all the other nodes in this scenario.

In DFS, we use a recursive function to explore nodes as far as possible along each branch. Upon reaching the end of a branch, we backtrack to the next branch and continue exploring. Once we encounter an unvisited node, we will take one of its neighbor nodes (if exists) as the next node on this branch. Recursively call the function to take the next node as the 'starting node' and solve the subproblem.

We can only have one branch as per our problem. So, DFS works for our use case to find the shortest distance from a node to all other nodes.

Note that, we cannot use DFS in a standard unweighted graph to find the shortest distance from a node to any other node. For example, let's take a graph with three edges: 1 -> 2, 1 -> 3 and 2 -> 3. Let's say we start with node 1 and mark its distance as 0. We move forward, visit node 2 and mark its distance as 1. As mentioned in DFS, we explore nodes as far as possible along the branch, so from node 2 we will go to node 3. We will mark its distance as 2, which is incorrect. We can visit node 3 via 1 -> 3 with a distance of 1.

In this approach, we begin DFS traversals for both node1 and node2 to compute the shortest distances from node1 and node2 to all other nodes. We will store the results in arrays labelled dist1 and dist2, respectively.

Then, we will iterate over all the nodes and find a node minDistNode with the smallest maximum value between the distances from node1 to minDistNode and node2 to minDistNode similar to the BFS approach.

class Solution {
    public void dfs(int node, int[] edges, int[] dist, Boolean[] visit) {
        visit[node] = true;
        int neighbor = edges[node];
        if (neighbor != -1 && !visit[neighbor]) {
            dist[neighbor] = 1 + dist[node];
            dfs(neighbor, edges, dist, visit);
        }
    }

    public int closestMeetingNode(int[] edges, int node1, int node2) {
        int n = edges.length;
        int[] dist1 = new int[n], dist2 = new int[n];
        Arrays.fill(dist1, Integer.MAX_VALUE);
        Arrays.fill(dist2, Integer.MAX_VALUE);
        dist1[node1] = 0;
        dist2[node2] = 0;

        Boolean[] visit1 = new Boolean[n], visit2 = new Boolean[n];
        Arrays.fill(visit1, Boolean.FALSE);
        Arrays.fill(visit2, Boolean.FALSE);

        dfs(node1, edges, dist1, visit1);
        dfs(node2, edges, dist2, visit2);

        int minDistNode = -1, minDistTillNow = Integer.MAX_VALUE;
        for (int currNode = 0; currNode < n; currNode++) {
            if (minDistTillNow > Math.max(dist1[currNode], dist2[currNode])) {
                minDistNode = currNode;
                minDistTillNow = Math.max(dist1[currNode], dist2[currNode]);
            }
        }

        return minDistNode;
    }
}

