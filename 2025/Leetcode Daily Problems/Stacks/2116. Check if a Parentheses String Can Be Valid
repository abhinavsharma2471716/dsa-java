A parentheses string is a non-empty string consisting only of '(' and ')'. It is valid if any of the following conditions is true:

It is ().
It can be written as AB (A concatenated with B), where A and B are valid parentheses strings.
It can be written as (A), where A is a valid parentheses string.
You are given a parentheses string s and a string locked, both of length n. locked is a binary string consisting only of '0's and '1's. For each index i of locked,

If locked[i] is '1', you cannot change s[i].
But if locked[i] is '0', you can change s[i] to either '(' or ')'.
Return true if you can make s a valid parentheses string. Otherwise, return false.

 

Example 1:


Input: s = "))()))", locked = "010100"
Output: true
Explanation: locked[1] == '1' and locked[3] == '1', so we cannot change s[1] or s[3].
We change s[0] and s[4] to '(' while leaving s[2] and s[5] unchanged to make s valid.

Code :

class Solution {
    public boolean canBeValid(String s, String locked) {
        int length = s.length();
        // If length of string is odd, return false (can't be valid)
        if (length % 2 == 1) {
            return false;
        }
        // Stack to keep track of open brackets and unlocked positions
        Stack<Integer> openBrackets = new Stack<>();
        Stack<Integer> unlocked = new Stack<>();
        // Iterate through the string to handle '(' and ')'
        for (int i = 0; i < length; i++) {
            if (locked.charAt(i) == '0') {
                unlocked.push(i);  // Can flip the character here
            } else if (s.charAt(i) == '(') {
                openBrackets.push(i);  // Push open parentheses index
            } else if (s.charAt(i) == ')') {
                // Match with the most recent '('
                if (!openBrackets.empty()) {
                    openBrackets.pop();
                } else if (!unlocked.empty()) {
                    unlocked.pop();
                } else {
                    // If no match found, return false
                    return false;
                }
            }
        }
        // Match remaining open brackets with unlocked characters
        while (!openBrackets.empty() && !unlocked.empty() && openBrackets.peek() < unlocked.peek()) {
            openBrackets.pop();
            unlocked.pop();
        }
        // If there are unmatched open brackets left, return false
        return openBrackets.empty();
    }
}
