We run a preorder depth-first search (DFS) on the root of a binary tree.

At each node in this traversal, we output D dashes (where D is the depth of this node), then we output the value of this node.  If the depth of a node is D, the depth of its immediate child is D + 1.  The depth of the root node is 0.

If a node has only one child, that child is guaranteed to be the left child.

Given the output traversal of this traversal, recover the tree and return its root.

 

Example 1:


Input: traversal = "1-2--3--4-5--6--7"
Output: [1,2,5,3,4,6,7]
Example 2:


Input: traversal = "1-2--3---4-5--6---7"
Output: [1,2,5,3,null,6,null,4,null,7]
Example 3:


Input: traversal = "1-401--349---90--88"
Output: [1,401,null,349,88,90]
 

Constraints:

The number of nodes in the original tree is in the range [1, 1000].
1 <= Node.val <= 109


Code :

public class Solution {
    static int index = 0;
    public TreeNode recoverFromPreorder(String traversal) {
        index = 0;
        return helper(traversal, 0);
    }
    private TreeNode helper(String traversal, int depth) {
        if (index >= traversal.length())
            return null;
        // Count the number of dashes
        int dashCount = 0;
        while ((index + dashCount) < traversal.length() && traversal.charAt(index + dashCount) == '-'){
            dashCount++;
        }
        // If the number of dashes doesn't match the current depth, return null
        if (dashCount != depth)
            return null;
        // Move index past the dashes
        index += dashCount;
        // Extract the node value
        int value = 0;
        while (index < traversal.length() && Character.isDigit(traversal.charAt(index))) {
            value = value * 10 + (traversal.charAt(index++) - '0');
        }
        // Create the current node
        TreeNode node = new TreeNode(value);
        // Recursively build the left and right subtrees
        node.left = helper(traversal, depth + 1);
        node.right = helper(traversal, depth + 1);
        return node;
    }
}
