Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:

answer[i] % answer[j] == 0, or
answer[j] % answer[i] == 0
If there are multiple solutions, return any of them.

 

Example 1:

Input: nums = [1,2,3]
Output: [1,2]
Explanation: [1,3] is also accepted.
Example 2:

Input: nums = [1,2,4,8]
Output: [1,2,4,8]
 

Constraints:

1 <= nums.length <= 1000
1 <= nums[i] <= 2 * 109
All the integers in nums are unique.


Code:

public class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        int[] dp = new int[nums.length];
        Arrays.fill(dp, 1);
        Arrays.sort(nums);
        int[] previousIndex = new int[nums.length];
        int maxLength = 1;
        int maxIndex = 0;
        
        for (int i = 0; i < nums.length; i++) {
            previousIndex[i] = i;
            for (int j = 0; j < i; j++) {
               System.out.println("j is : "+j+" dpofi["+i+"] : "+dp[i]+" dpofj["+j+"] : "+dp[j]);
                if (nums[i] % nums[j] == 0 && dp[j] + 1 > dp[i]) {
                    dp[i] = dp[j] + 1;
                    previousIndex[i] = j;
                System.out.println("dp["+i+"] : "+dp[i]+" previousIndex["+i+"] : "+j);
                }
            }
            if (dp[i] > maxLength) {
                maxLength = dp[i];
                maxIndex = i;
               System.out.println("maxLength is : "+maxLength+" maxIndex is : "+i);
            }
        }
        
        
        List<Integer> subset = new ArrayList<>();
        subset.add(nums[maxIndex]);
        while (previousIndex[maxIndex] != maxIndex) {
            maxIndex = previousIndex[maxIndex];
            subset.add(nums[maxIndex]);
        }
        
        return subset;
    }
}
