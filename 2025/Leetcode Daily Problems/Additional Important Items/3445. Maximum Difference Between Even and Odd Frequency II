You are given a string s and an integer k. Your task is to find the maximum difference between the frequency of two characters, freq[a] - freq[b], in a substring subs of s, such that:

subs has a size of at least k.
Character a has an odd frequency in subs.
Character b has an even frequency in subs.
Return the maximum difference.

Note that subs can contain more than 2 distinct characters.

 

Example 1:

Input: s = "12233", k = 4

Output: -1

Explanation:

For the substring "12233", the frequency of '1' is 1 and the frequency of '3' is 2. The difference is 1 - 2 = -1.

Example 2:

Input: s = "1122211", k = 3

Output: 1

Explanation:

For the substring "11222", the frequency of '2' is 3 and the frequency of '1' is 2. The difference is 3 - 2 = 1.

Example 3:

Input: s = "110", k = 3

Output: -1

 

Constraints:

3 <= s.length <= 3 * 104
s consists only of digits '0' to '4'.
The input is generated that at least one substring has a character with an even frequency and a character with an odd frequency.
1 <= k <= s.length

Code :

public class Solution {

    // Function to compute the parity state: 
    // 0 = even-even, 1 = even-odd, 2 = odd-even, 3 = odd-odd
    private int getState(int countA, int countB) {
        int parityA = countA % 2;
        int parityB = countB % 2;

        return (parityA << 1) | parityB;
    }

    public int maxDifference(String s, int k) {
        int n = s.length();
        int maxDiff = Integer.MIN_VALUE;

        // Try every pair of characters (a, b) from '0' to '4'
        for (char a = '0'; a <= '4'; a++) {
            for (char b = '0'; b <= '4'; b++) {
                if (a == b) continue;

                // Store the minimum value of (prefixA - prefixB) for each state
                int[] minPrefixDiff = new int[4];
                Arrays.fill(minPrefixDiff, Integer.MAX_VALUE);

                int totalA = 0, totalB = 0;       // Count of a's and b's in [0..right]
                int prefixA = 0, prefixB = 0;     // Count of a's and b's in [0..left]
                int left = -1;

                for (int right = 0; right < n; right++) {
                    // Expand the right pointer
                    if (s.charAt(right) == a) totalA++;
                    if (s.charAt(right) == b) totalB++;

                    // Slide window if its length is at least k and we have meaningful b's and a's
                    while (right - left >= k && totalB - prefixB >= 2 && totalA - prefixA >= 1) {
                        int state = getState(prefixA, prefixB);
                        minPrefixDiff[state] = Math.min(minPrefixDiff[state], prefixA - prefixB);

                        // Move the left pointer
                        left++;
                        if (s.charAt(left) == a) prefixA++;
                        if (s.charAt(left) == b) prefixB++;
                    }

                    // Check if we can update max difference
                    int currentState = getState(totalA, totalB);
                    int oppositeState = currentState ^ 2; // flip parity of 'a' (odd <-> even)

                    if (minPrefixDiff[oppositeState] != Integer.MAX_VALUE) {
                        int currentDiff = (totalA - totalB) - minPrefixDiff[oppositeState];
                        maxDiff = Math.max(maxDiff, currentDiff);
                    }
                }
            }
        }

        return maxDiff;
    }
}
