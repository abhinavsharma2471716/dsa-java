Given an integer n, return all the numbers in the range [1, n] sorted in lexicographical order.

You must write an algorithm that runs in O(n) time and uses O(1) extra space. 

 

Example 1:

Input: n = 13
Output: [1,10,11,12,13,2,3,4,5,6,7,8,9]
Example 2:

Input: n = 2
Output: [1,2]
 

Constraints:

1 <= n <= 5 * 104


Code :

Iterative Approach :

Complexity Analysis
Time Complexity: O(n)

The algorithm generates numbers in lexicographical order and iterates up to n times to populate the lexicographicalNumbers array. Each iteration involves constant-time operations (checking conditions and updating currentNumber). Thus, the time complexity is linear in terms of n.

Space Complexity: O(1)

The algorithm uses a constant amount of additional space for variables like currentNumber and loop counters. Therefore, the space complexity is O(1).



class Solution {
    public List<Integer> lexicalOrder(int n) {
        int current  = 1;
        List<Integer> res = new ArrayList<>();
        for(int i=0;i<n;i++){
          res.add(current);
          if(current * 10 <=n){
            current = current * 10;
          }else{
            while(current  % 10 == 9 || current + 1 > n){
                current =current / 10;
            }
            current ++;
          }
        }
        return res;
    }
}
