Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.

If the fractional part is repeating, enclose the repeating part in parentheses.

If multiple answers are possible, return any of them.

It is guaranteed that the length of the answer string is less than 104 for all the given inputs.

 

Example 1:

Input: numerator = 1, denominator = 2
Output: "0.5"
Example 2:

Input: numerator = 2, denominator = 1
Output: "2"
Example 3:

Input: numerator = 4, denominator = 333
Output: "0.(012)"
 

Constraints:

-2^31 <= numerator, denominator <= 2^31 - 1
denominator != 0

Code :

class Solution {
    public String fractionToDecimal(int numerator, int denominator) {
        if (numerator == 0) return "0";     
       StringBuilder result = new StringBuilder();     
        // Handle sign
        if ((numerator < 0) ^ (denominator < 0)) {
            result.append("-");
        }    
        // Convert to long to avoid overflow
        long num = Math.abs((long) numerator);
        long den = Math.abs((long) denominator);     
        // Integer part
        result.append(num / den);
        long remainder = num % den;     
        if (remainder == 0) {
            return result.toString(); // no fractional part
        }     
        result.append(".");     
        // Map to store remainder -> position in result
        Map<Long, Integer> remainderMap = new HashMap<>();  
        while (remainder != 0) {
            if (remainderMap.containsKey(remainder)) {
                int pos = remainderMap.get(remainder);
                result.insert(pos, "(");
                result.append(")");
                break;
            }        
            remainderMap.put(remainder, result.length());
            remainder *= 10;
            result.append(remainder / den);
            remainder %= den;
        }       
        return result.toString();
    }
}


Notes:

Our code runs in O(denominator) time because, in the worst case, the loop that builds the decimal part can run as many times as the denominator. This is because each remainder is unique until it repeats, and there can be at most denominator - 1 different remainders. For example, if the denominator is 7, the remainders repeat after 6 steps, which produces the repeating decimal 0.(142857). Since checking and storing remainders in a HashMap takes constant time, and adding digits to the result also takes constant time, the total work grows with the denominator. The space complexity is also O(denominator), as we may need to store all possible remainders and digits in memory.

