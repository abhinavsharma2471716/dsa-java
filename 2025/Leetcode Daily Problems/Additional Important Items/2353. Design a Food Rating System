Design a food rating system that can do the following:

Modify the rating of a food item listed in the system.
Return the highest-rated food item for a type of cuisine in the system.
Implement the FoodRatings class:

FoodRatings(String[] foods, String[] cuisines, int[] ratings) Initializes the system. The food items are described by foods, cuisines and ratings, all of which have a length of n.
foods[i] is the name of the ith food,
cuisines[i] is the type of cuisine of the ith food, and
ratings[i] is the initial rating of the ith food.
void changeRating(String food, int newRating) Changes the rating of the food item with the name food.
String highestRated(String cuisine) Returns the name of the food item that has the highest rating for the given type of cuisine. If there is a tie, return the item with the lexicographically smaller name.
Note that a string x is lexicographically smaller than string y if x comes before y in dictionary order, that is, either x is a prefix of y, or if i is the first position such that x[i] != y[i], then x[i] comes before y[i] in alphabetic order.

 

Example 1:

Input
["FoodRatings", "highestRated", "highestRated", "changeRating", "highestRated", "changeRating", "highestRated"]
[[["kimchi", "miso", "sushi", "moussaka", "ramen", "bulgogi"], ["korean", "japanese", "japanese", "greek", "japanese", "korean"], [9, 12, 8, 15, 14, 7]], ["korean"], ["japanese"], ["sushi", 16], ["japanese"], ["ramen", 16], ["japanese"]]
Output
[null, "kimchi", "ramen", null, "sushi", null, "ramen"]

Explanation
FoodRatings foodRatings = new FoodRatings(["kimchi", "miso", "sushi", "moussaka", "ramen", "bulgogi"], ["korean", "japanese", "japanese", "greek", "japanese", "korean"], [9, 12, 8, 15, 14, 7]);
foodRatings.highestRated("korean"); // return "kimchi"
                                    // "kimchi" is the highest rated korean food with a rating of 9.
foodRatings.highestRated("japanese"); // return "ramen"
                                      // "ramen" is the highest rated japanese food with a rating of 14.
foodRatings.changeRating("sushi", 16); // "sushi" now has a rating of 16.
foodRatings.highestRated("japanese"); // return "sushi"
                                      // "sushi" is the highest rated japanese food with a rating of 16.
foodRatings.changeRating("ramen", 16); // "ramen" now has a rating of 16.
foodRatings.highestRated("japanese"); // return "ramen"
                                      // Both "sushi" and "ramen" have a rating of 16.
                                      // However, "ramen" is lexicographically smaller than "sushi".
 

Constraints:

1 <= n <= 2 * 104
n == foods.length == cuisines.length == ratings.length
1 <= foods[i].length, cuisines[i].length <= 10
foods[i], cuisines[i] consist of lowercase English letters.
1 <= ratings[i] <= 108
All the strings in foods are distinct.
food will be the name of a food item in the system across all calls to changeRating.
cuisine will be a type of cuisine of at least one food item in the system across all calls to highestRated.
At most 2 * 104 calls in total will be made to changeRating and highestRated.

Code :

public class FoodRatings {
    private Map<String, Integer> foodToRating = new HashMap<>();
    private Map<String, String> foodToCuisine = new HashMap<>();
    private Map<String, TreeSet<FoodEntry>> cuisineToFoods = new HashMap<>();
    // Custom class to store food and its rating
    private static class FoodEntry {
        String food;
        int rating;

        FoodEntry(String food, int rating) {
            this.food = food;
            this.rating = rating;
        }
    }
    public FoodRatings(String[] foods, String[] cuisines, int[] ratings) {
        for (int i = 0; i < foods.length; i++) {
            String food = foods[i];
            String cuisine = cuisines[i];
            int rating = ratings[i];

            foodToRating.put(food, rating);
            foodToCuisine.put(food, cuisine);

            cuisineToFoods
                .computeIfAbsent(cuisine, k -> new TreeSet<>((a, b) -> {
                    if (a.rating != b.rating) {
                        return b.rating - a.rating; // higher rating first
                    }
                    return a.food.compareTo(b.food); // lexicographically smaller first
                }))
                .add(new FoodEntry(food, rating));
        }
    }
    public void changeRating(String food, int newRating) {
        String cuisine = foodToCuisine.get(food);
        TreeSet<FoodEntry> foodsSet = cuisineToFoods.get(cuisine);

        // Remove old entry
        foodsSet.remove(new FoodEntry(food, foodToRating.get(food)));

        // Update rating
        foodToRating.put(food, newRating);

        // Add new entry
        foodsSet.add(new FoodEntry(food, newRating));
    }

    public String highestRated(String cuisine) {
        return cuisineToFoods.get(cuisine).first().food;
    }
}


Note :

How TreeSet.remove() works
TreeSet.remove(obj) internally:
Uses the comparator (or compareTo) to locate the element.
Removes the element that compares as 0 to the object you passed.
In your comparator:
if (a.rating != b.rating) return b.rating - a.rating;
return a.food.compareTo(b.food);
Two FoodEntry objects are considered equal for TreeSet purposes if:
a.rating == b.rating && a.food.equals(b.food)
That’s exactly the case when you do:
new FoodEntry(food, foodToRating.get(food))
Same food name and same old rating → comparator returns 0.
TreeSet then removes the matching node.

You are not relying on object reference equality.
TreeSet.remove() uses the comparator to find the object to remove.
Since your comparator returns 0 when the food name and rating match, it correctly removes the old entry.
