You are given an array nums of n positive integers and an integer k.

Initially, you start with a score of 1. You have to maximize your score by applying the following operation at most k times:

Choose any non-empty subarray nums[l, ..., r] that you haven't chosen previously.
Choose an element x of nums[l, ..., r] with the highest prime score. If multiple such elements exist, choose the one with the smallest index.
Multiply your score by x.
Here, nums[l, ..., r] denotes the subarray of nums starting at index l and ending at the index r, both ends being inclusive.

The prime score of an integer x is equal to the number of distinct prime factors of x. For example, the prime score of 300 is 3 since 300 = 2 * 2 * 3 * 5 * 5.

Return the maximum possible score after applying at most k operations.

Since the answer may be large, return it modulo 109 + 7.

 

Example 1:

Input: nums = [8,3,9,3,8], k = 2
Output: 81
Explanation: To get a score of 81, we can apply the following operations:
- Choose subarray nums[2, ..., 2]. nums[2] is the only element in this subarray. Hence, we multiply the score by nums[2]. The score becomes 1 * 9 = 9.
- Choose subarray nums[2, ..., 3]. Both nums[2] and nums[3] have a prime score of 1, but nums[2] has the smaller index. Hence, we multiply the score by nums[2]. The score becomes 9 * 9 = 81.
It can be proven that 81 is the highest score one can obtain.
Example 2:

Input: nums = [19,12,14,6,10,18], k = 3
Output: 4788
Explanation: To get a score of 4788, we can apply the following operations: 
- Choose subarray nums[0, ..., 0]. nums[0] is the only element in this subarray. Hence, we multiply the score by nums[0]. The score becomes 1 * 19 = 19.
- Choose subarray nums[5, ..., 5]. nums[5] is the only element in this subarray. Hence, we multiply the score by nums[5]. The score becomes 19 * 18 = 342.
- Choose subarray nums[2, ..., 3]. Both nums[2] and nums[3] have a prime score of 2, but nums[2] has the smaller index. Hence, we multipy the score by nums[2]. The score becomes 342 * 14 = 4788.
It can be proven that 4788 is the highest score one can obtain.
 

Constraints:

1 <= nums.length == n <= 105
1 <= nums[i] <= 105
1 <= k <= min(n * (n + 1) / 2, 109)

Code :

class Solution {

    final int MOD = 1000000007;

    public int maximumScore(List<Integer> nums, int k) {
        int n = nums.size();
        List<Integer> primeScores = new ArrayList<>(Collections.nCopies(n, 0));

        // Calculate the prime score for each number in nums
        for (int index = 0; index < n; index++) {
            int num = nums.get(index);

            // Check for prime factors from 2 to sqrt(n)
            for (int factor = 2; factor <= Math.sqrt(num); factor++) {
                if (num % factor == 0) {
                    // Increment prime score for each prime factor
                    primeScores.set(index, primeScores.get(index) + 1);

                    // Remove all occurrences of the prime factor from num
                    while (num % factor == 0) num /= factor;
                }
            }

            // If num is still greater than or equal to 2, it's a prime factor
            if (num >= 2) primeScores.set(index, primeScores.get(index) + 1);
        }

        // Initialize next and previous dominant index arrays
        int[] nextDominant = new int[n];
        int[] prevDominant = new int[n];
        Arrays.fill(nextDominant, n);
        Arrays.fill(prevDominant, -1);

        // Stack to store indices for monotonic decreasing prime score
        Stack<Integer> decreasingPrimeScoreStack = new Stack<>();

        // Calculate the next and previous dominant indices for each number
        for (int index = 0; index < n; index++) {
            // While the stack is not empty and the current prime score is greater than the stack's top
            while (
                !decreasingPrimeScoreStack.isEmpty() &&
                primeScores.get(decreasingPrimeScoreStack.peek()) <
                primeScores.get(index)
            ) {
                int topIndex = decreasingPrimeScoreStack.pop();

                // Set the next dominant element for the popped index
                nextDominant[topIndex] = index;
            }

            // If the stack is not empty, set the previous dominant element for the current index
            if (!decreasingPrimeScoreStack.isEmpty()) prevDominant[index] =
                decreasingPrimeScoreStack.peek();

            // Push the current index onto the stack
            decreasingPrimeScoreStack.push(index);
        }

        // Calculate the number of subarrays in which each element is dominant
        long[] numOfSubarrays = new long[n];
        for (int index = 0; index < n; index++) {
            numOfSubarrays[index] =
                ((long) nextDominant[index] - index) *
                (index - prevDominant[index]);
        }

        // Priority queue to process elements in decreasing order of their value
        PriorityQueue<int[]> processingQueue = new PriorityQueue<>((a, b) -> {
            if (b[0] == a[0]) {
                return Integer.compare(a[1], b[1]); // break tie based on the index (ascending order)
            }
            return Integer.compare(b[0], a[0]); // descending order for the value
        });

        // Push each number and its index onto the priority queue
        for (int index = 0; index < n; index++) {
            processingQueue.offer(new int[] { nums.get(index), index });
        }

        long score = 1;

        // Process elements while there are operations left
        while (k > 0) {
            // Get the element with the maximum value from the queue
            int[] top = processingQueue.poll();
            int num = top[0];
            int index = top[1];

            // Calculate the number of operations to apply on the current element
            long operations = Math.min((long) k, numOfSubarrays[index]);

            // Update the score by raising the element to the power of operations
            score = (score * power(num, operations)) % MOD;

            // Reduce the remaining operations count
            k -= operations;
        }

        return (int) score;
    }

    // Helper function to compute the power of a number modulo MOD
    //// Calculate the exponentiation using binary exponentiation 
      private long power(long base, long exponent) {
        if (exponent == 0) return 1;
        long half = power(base, exponent / 2);
        long result = (half * half) % MOD;
        if (exponent % 2 == 1) {
            result = (result * base) % MOD;
        }
        return result;
    }
}


Bonus:

We are given an array of positive integers nums, a number k, and the ability to perform the following operation at most k times:

Select any non-empty subarray that has not been chosen before.
Identify the number in this subarray with the highest prime score. The prime score of a number num is defined as the number of distinct prime factors of num. For example, 60 has a prime score of 3 because 60 = 2 × 2 × 3 × 5, whereas 24 = 2 × 2 × 2 × 3 has a prime score of 2. If the selected subarray contains only 60 and 24, we choose 60. If multiple numbers have the same prime score, we select the one that appears first in the subarray.
Multiply the current score by the chosen number. The score starts at 1.
Our task is to determine the greatest possible score we can achieve by performing the operation at most k times. Since the result may be large, we return it modulo 10^9 + 7.

An important observation is that since the array consists of positive integers, multiplying the current score by any of them can only increase or maintain its value. Therefore, it is always optimal to perform all k allowed operations. Notice that the constraint k <= (n + 1) * n / 2 ensures that there are always enough unique subarrays to apply the operations on.

Now, consider a variation of the problem where we are not restricted to choosing a previously unselected subarray for each operation. What would be the optimal strategy to maximize our score? Intuitively, we would always select the subarray containing the greatest element, repeating this choice k times. This is valid because, in subarrays of length 1, the largest element would have the highest prime score and would always be chosen.

However, in our original problem, we cannot repeatedly select the same subarray. We could start by choosing the subarray containing the maximum element, but what happens next? While there may still be subarrays that include this maximum element, we cannot be certain that it has the highest prime score in each of them.


For convenience, let the element with the highest prime score in a subarray be the "dominant" element of that subarray.

To address the challenge described above, it is helpful to calculate the number of subarrays each number is dominant in. With this information, we can start with the largest element and apply the operation to all subarrays where it remains dominant. We then repeat this for the second-largest element, and so on, until no further operations can be performed.

First, we need an efficient way to calculate the prime score of a number n. To do this, we iterate over all numbers in the range [2, sqrt(n)]. If we find a number p that divides n, we increment the prime score and remove all occurrences of p in n by repeatedly dividing n by p until it is no longer possible. Notice that we don't need to check if p is prime to increment the prime score because any composite number (e.g., 9, 15) will have had its smaller prime factors removed earlier and therefore will not divide n. Finally, if n >= 2, n must be prime, so we increment the score once more.

Now, notice that a number remains dominant until another element with a greater prime score appears either to its left or right. To efficiently determine this region, we use a monotonic decreasing stack, which helps identify the nearest elements with a higher prime score on both sides.

A monotonic stack is a data structure that maintains a specific order as elements are inserted. In this case, we need a monotonically decreasing stack based on prime scores, meaning each new element can only be added if it has a lower prime score than the one at the top. If the top element has a greater prime score, we pop it from the stack. When the current element causes another to be popped, it means it is the first element with a higher prime score to the right. Conversely, if we reach an element in the stack with a greater prime score than the current one, that element is the first with a higher prime score to the left.



After finding the indices of the nearest elements with a higher prime score on the left and right, prevDominant[i] and nextDominant[i], we can compute the number of subarrays in which the i-th element is dominant.

For the left boundary, we have i - prevDominant[i] choices, and for each of them, we have nextDominant[i] - i choices for the right boundary. This gives a total of: (i - prevDominant[i]) * (nextDominant[i] - i) subarrays, where the i-th element is dominant.



Finally, we need an efficient way to determine the next element on which we will apply operations across all subarrays where it is dominant. Since we need to process elements in decreasing order to maximize the score, a priority queue (max-heap) is a useful data structure. It allows us to quickly extract the largest element and then remove it to move on to the next one.


To sum up, the algorithm follows these steps:

Calculate the prime score for each number in nums.
Use a monotonic stack to determine the prevDominant[i] and nextDominant[i] indices for each nums[i].
Compute the number of subarrays in which each number is dominant.
Use a priority queue to process the numbers in decreasing order and apply operations to all subarrays where they are dominant.
