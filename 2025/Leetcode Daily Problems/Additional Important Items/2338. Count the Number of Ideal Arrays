You are given two integers n and maxValue, which are used to describe an ideal array.

A 0-indexed integer array arr of length n is considered ideal if the following conditions hold:

Every arr[i] is a value from 1 to maxValue, for 0 <= i < n.
Every arr[i] is divisible by arr[i - 1], for 0 < i < n.
Return the number of distinct ideal arrays of length n. Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:

Input: n = 2, maxValue = 5
Output: 10
Explanation: The following are the possible ideal arrays:
- Arrays starting with the value 1 (5 arrays): [1,1], [1,2], [1,3], [1,4], [1,5]
- Arrays starting with the value 2 (2 arrays): [2,2], [2,4]
- Arrays starting with the value 3 (1 array): [3,3]
- Arrays starting with the value 4 (1 array): [4,4]
- Arrays starting with the value 5 (1 array): [5,5]
There are a total of 5 + 2 + 1 + 1 + 1 = 10 distinct ideal arrays.
Example 2:

Input: n = 5, maxValue = 3
Output: 11
Explanation: The following are the possible ideal arrays:
- Arrays starting with the value 1 (9 arrays): 
   - With no other distinct values (1 array): [1,1,1,1,1] 
   - With 2nd distinct value 2 (4 arrays): [1,1,1,1,2], [1,1,1,2,2], [1,1,2,2,2], [1,2,2,2,2]
   - With 2nd distinct value 3 (4 arrays): [1,1,1,1,3], [1,1,1,3,3], [1,1,3,3,3], [1,3,3,3,3]
- Arrays starting with the value 2 (1 array): [2,2,2,2,2]
- Arrays starting with the value 3 (1 array): [3,3,3,3,3]
There are a total of 9 + 1 + 1 = 11 distinct ideal arrays.
 

Constraints:

2 <= n <= 10^4
1 <= maxValue <= 10^4


Code :

class Solution {
    static final int MOD = 1_000_000_007;
    int[][] dp;
    long[] fact, invFact;

    public int idealArrays(int n, int maxValue) {
        int maxLen = 14; // Since maxValue is 10^4, the longest chain is log2(10^4) â‰ˆ 14
        dp = new int[maxValue + 1][maxLen + 1];

        // Step 1: DP to build all chains
        for (int i = 1; i <= maxValue; i++) {
            dp[i][1] = 1;
        }

        for (int len = 2; len <= maxLen; len++) {
            for (int i = 1; i <= maxValue; i++) {
                for (int mul = i * 2; mul <= maxValue; mul += i) {
                    dp[mul][len] = (dp[mul][len] + dp[i][len - 1]) % MOD;
                }
            }
        }

        // Step 2: Precompute factorials and inverse factorials
        precomputeFactorials(n);

        // Step 3: Count valid arrays
        long result = 0;
        for (int i = 1; i <= maxValue; i++) {
            for (int len = 1; len <= maxLen; len++) {
                if (dp[i][len] == 0) continue;

                long ways = nCr(n - 1, len - 1); // Choose positions
                result = (result + dp[i][len] * ways % MOD) % MOD;
            }
        }

        return (int) result;
    }

    // Precompute factorials and inverse factorials
    void precomputeFactorials(int n) {
        fact = new long[n + 1];
        invFact = new long[n + 1];
        fact[0] = 1;
        for (int i = 1; i <= n; i++) {
            fact[i] = fact[i - 1] * i % MOD;
        }
        invFact[n] = modInverse(fact[n]);
        for (int i = n - 1; i >= 0; i--) {
            invFact[i] = invFact[i + 1] * (i + 1) % MOD;
        }
    }

    // nCr using precomputed factorials
    long nCr(int n, int r) {
        if (r < 0 || r > n) return 0;
        return fact[n] * invFact[r] % MOD * invFact[n - r] % MOD;
    }

    // Modular inverse using Fermat's Little Theorem
    long modInverse(long x) {
        return binPow(x, MOD - 2); // x^(MOD-2) mod MOD
    }

    // Recursive binary exponentiation
    long binPow(long base, long exp) {
        if (exp == 0) return 1;
        long half = binPow(base, exp / 2);
        long result = (half * half) % MOD;
        if (exp % 2 == 1) result = (result * base) % MOD;
        return result;
    }
}
