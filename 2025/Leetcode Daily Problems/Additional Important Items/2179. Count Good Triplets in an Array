You are given two 0-indexed arrays nums1 and nums2 of length n, both of which are permutations of [0, 1, ..., n - 1].

A good triplet is a set of 3 distinct values which are present in increasing order by position both in nums1 and nums2. In other words, if we consider pos1v as the index of the value v in nums1 and pos2v as the index of the value v in nums2, then a good triplet will be a set (x, y, z) where 0 <= x, y, z <= n - 1, such that pos1x < pos1y < pos1z and pos2x < pos2y < pos2z.

Return the total number of good triplets.

 

Example 1:

Input: nums1 = [2,0,1,3], nums2 = [0,1,2,3]
Output: 1
Explanation: 
There are 4 triplets (x,y,z) such that pos1x < pos1y < pos1z. They are (2,0,1), (2,0,3), (2,1,3), and (0,1,3). 
Out of those triplets, only the triplet (0,1,3) satisfies pos2x < pos2y < pos2z. Hence, there is only 1 good triplet.
Example 2:

Input: nums1 = [4,0,1,3,2], nums2 = [4,1,0,2,3]
Output: 4
Explanation: The 4 good triplets are (4,0,3), (4,0,2), (4,1,3), and (4,1,2).
 

Constraints:

n == nums1.length == nums2.length
3 <= n <= 105
0 <= nums1[i], nums2[i] <= n - 1
nums1 and nums2 are permutations of [0, 1, ..., n - 1].

Code:


// Fenwick Tree (Binary Indexed Tree) implementation
class FenwickTree {
    private int[] tree;

    // Constructor initializes the tree with size + 1 (1-based indexing)
    public FenwickTree(int size) {
        tree = new int[size + 1];
    }

    // Helper method to get the lowest set bit
    private int lowbit(int x) {
        return x & -x;
    }

    // Update method: adds `delta` to the given index and all of its parent nodes
    public void update(int index, int delta) {
        index++; // Convert to 1-based index
        while (index < tree.length) {
            tree[index] += delta;
            index += lowbit(index); // Move to next affected node
        }
    }

    // Query method: returns the prefix sum from index 0 to index
    public int query(int index) {
        index++; // Convert to 1-based index
        int sum = 0;
        while (index > 0) {
            sum += tree[index];
            index -= lowbit(index); // Move to parent node
        }
        return sum;
    }
}

class Solution {

    /**
     * Finds number of good triplets (i, j, k) such that:
     * i < j < k and positions of nums1[i], nums1[j], nums1[k] in nums2 are in increasing order
     */
    public long goodTriplets(int[] nums1, int[] nums2) {
        int n = nums1.length;

        // Map nums2 values to their positions
        int[] posInNums2 = new int[n];
        for (int i = 0; i < n; i++) {
            posInNums2[nums2[i]] = i;
        }

        // Transform nums1 into a new array representing positions of its values in nums2
        int[] mappedPositions = new int[n];
        for (int i = 0; i < n; i++) {
            mappedPositions[i] = posInNums2[nums1[i]];
        }

        // Fenwick Tree to count how many indices less than current position have occurred
        FenwickTree fenwick = new FenwickTree(n);
        long totalTriplets = 0;

        for (int i = 0; i < n; i++) {
            int currentPos = mappedPositions[i];

            // Count of elements to the left that are less than currentPos
            int left = fenwick.query(currentPos);

            // Update the current position in Fenwick Tree
            fenwick.update(currentPos, 1);

            // Count of elements to the right that are greater than currentPos
            int right = (n - 1 - currentPos) - (i - left);

            // Multiply the count of left and right to get total good triplets for current i
            totalTriplets += (long) left * right;
        }

        return totalTriplets;
    }
}
