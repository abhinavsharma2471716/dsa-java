Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.

 

Example 1:

Input: matrix =
[
  [0,1,1,1],
  [1,1,1,1],
  [0,1,1,1]
]
Output: 15
Explanation: 
There are 10 squares of side 1.
There are 4 squares of side 2.
There is  1 square of side 3.
Total number of squares = 10 + 4 + 1 = 15.
Example 2:

Input: matrix = 
[
  [1,0,1],
  [1,1,0],
  [1,1,0]
]
Output: 7
Explanation: 
There are 6 squares of side 1.  
There is 1 square of side 2. 
Total number of squares = 6 + 1 = 7.
 

Constraints:

1 <= arr.length <= 300
1 <= arr[0].length <= 300
0 <= arr[i][j] <= 1

Code :

DP:

class Solution {
    public int countSquares(int[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;
        int[][] dp = new int[m][n];
        int count = 0;

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == 1) {
                    if (i == 0 || j == 0) {
                        dp[i][j] = 1;  // Edge case: first row or first column
                    } else {
                        dp[i][j] = Math.min(Math.min(dp[i-1][j], dp[i][j-1]), dp[i-1][j-1]) + 1;
                    }
                    count += dp[i][j];
                }
            }
        }
        
        return count;
    }
}


Approach 2: Recursion


class Solution {
    public int countSquares(int[][] matrix) {
        int m = matrix.length;
        int n = matrix[0].length;
        Integer[][] memo = new Integer[m][n];
        int count = 0;     
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                count += countSquaresHelper(matrix, i, j, memo);
            }
        }      
        return count;
    }
    private int countSquaresHelper(int[][] matrix, int i, int j, Integer[][] memo) {
        if (i < 0 || j < 0 || matrix[i][j] == 0) {
            return 0;
        }       
        // Check if already computed
        if (memo[i][j] != null) {
            return memo[i][j];
        }     
        // Recursive calculation
        int size = 1 + Math.min(
            Math.min(countSquaresHelper(matrix, i - 1, j, memo), 
                     countSquaresHelper(matrix, i, j - 1, memo)), 
                     countSquaresHelper(matrix, i - 1, j - 1, memo));
        
        memo[i][j] = size;
        return size;
    }
}


