Given a triangle array, return the minimum path sum from top to bottom.

For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.

 

Example 1:

Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]
Output: 11
Explanation: The triangle looks like:
   2
  3 4
 6 5 7
4 1 8 3
The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).
Example 2:

Input: triangle = [[-10]]
Output: -10
 

Constraints:

1 <= triangle.length <= 200
triangle[0].length == 1
triangle[i].length == triangle[i - 1].length + 1
-104 <= triangle[i][j] <= 104
 

Follow up: Could you do this using only O(n) extra space, where n is the total number of rows in the triangle?

Code :

Approach 1:

T.C. - O(n^2)
S.C. - O(n^2)


class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int n = triangle.size(); 
        Integer[][] dp = new Integer[n][n];


        return helper(triangle, 0, 0, dp);
    }

    private int helper(List<List<Integer>> triangle, int row, int col, Integer[][] dp) {
        int n = triangle.size();

        if (row == n - 1) {
            return triangle.get(row).get(col);
        }

        if (dp[row][col] != null) { // already computed
            return dp[row][col];
        }

        int down = triangle.get(row).get(col) + helper(triangle, row + 1, col, dp);
        int downRight = triangle.get(row).get(col) + helper(triangle, row + 1, col + 1, dp);

        return dp[row][col] = Math.min(down, downRight);
    }
}


Approach 2:

T.C. - O(n^2)
S.C. - O(n)

class Solution {
    public int minimumTotal(List<List<Integer>> triangle) {
        int n = triangle.size();
        int[] dp = new int[n];

        // Initialize dp with the last row of triangle
        for (int j = 0; j < n; j++) {
            dp[j] = triangle.get(n - 1).get(j);
        }

        // Bottom-up calculation
        for (int i = n - 2; i >= 0; i--) {
            for (int j = 0; j <= i; j++) {
                dp[j] = triangle.get(i).get(j) + Math.min(dp[j], dp[j + 1]);
            }
        }

        return dp[0];
    }
}
