On day 1, one person discovers a secret.

You are given an integer delay, which means that each person will share the secret with a new person every day, starting from delay days after discovering the secret. You are also given an integer forget, which means that each person will forget the secret forget days after discovering it. A person cannot share the secret on the same day they forgot it, or on any day afterwards.

Given an integer n, return the number of people who know the secret at the end of day n. Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:

Input: n = 6, delay = 2, forget = 4
Output: 5
Explanation:
Day 1: Suppose the first person is named A. (1 person)
Day 2: A is the only person who knows the secret. (1 person)
Day 3: A shares the secret with a new person, B. (2 people)
Day 4: A shares the secret with a new person, C. (3 people)
Day 5: A forgets the secret, and B shares the secret with a new person, D. (3 people)
Day 6: B shares the secret with E, and C shares the secret with F. (5 people)
Example 2:

Input: n = 4, delay = 1, forget = 3
Output: 6
Explanation:
Day 1: The first person is named A. (1 person)
Day 2: A shares the secret with B. (2 people)
Day 3: A and B share the secret with 2 new people, C and D. (4 people)
Day 4: A forgets the secret. B, C, and D share the secret with 3 new people. (6 people)
 

Constraints:

2 <= n <= 1000
1 <= delay < forget <= n
 


Code :

Approach 1 : O(n *  forget )

class Solution {
    public int peopleAwareOfSecret(int n, int delay, int forget) {
        int MOD = 1_000_000_007;
        long[] dp = new long[n + 1];
        dp[1] = 1; // Day 1, first person knows the secret

        for (int day = 1; day <= n; day++) {
            long sharers = dp[day];
            if (sharers == 0) continue;
            
            for (int j = day + delay; j < day + forget && j <= n; j++) {
                dp[j] = (dp[j] + sharers) % MOD;
            }
        }

        long ans = 0;
        // Count those who still remember at day n
        for (int i = n - forget + 1; i <= n; i++) {
            if (i > 0) ans = (ans + dp[i]) % MOD;
        }

        return (int) ans;
    }
}



Approach 2 : O(n) using difference array

class Solution {
    public int peopleAwareOfSecret(int n, int delay, int forget) {
        int MOD = 1_000_000_007;
        long[] dp = new long[n + 1]; // dp[i] = new people who learn secret at day i
        long[] add = new long[n + 2]; // difference array for sharers
        dp[1] = 1;
        add[1 + delay] += 1;  // first person starts sharing after delay days
        add[1 + forget] -= 1; // first person stops sharing after forget days
        long sharers = 0; // running sum of current sharers
        for (int day = 2; day <= n; day++) {
            sharers = (sharers + add[day]) % MOD; 
            if (sharers == 0) continue;
            if (sharers < 0) sharers += MOD;
            dp[day] = sharers; // new learners today = current sharers
            // schedule their sharing/forgetting
            if (day + delay <= n) {
                add[day + delay] = (add[day + delay] + dp[day]) % MOD;
            }
            if (day + forget <= n) {
                add[day + forget] = (add[day + forget] - dp[day]) % MOD;
            }
        }
        long ans = 0;
        // Count only those who havenâ€™t forgotten by day n
        for (int i = n - forget + 1; i <= n; i++) {
            if (i > 0) ans = (ans + dp[i]) % MOD;
        }
        return (int) ans;
    }
}
