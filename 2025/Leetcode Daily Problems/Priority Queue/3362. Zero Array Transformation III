You are given an integer array nums of length n and a 2D array queries where queries[i] = [li, ri].

Each queries[i] represents the following action on nums:

Decrement the value at each index in the range [li, ri] in nums by at most 1.
The amount by which the value is decremented can be chosen independently for each index.
A Zero Array is an array with all its elements equal to 0.

Return the maximum number of elements that can be removed from queries, such that nums can still be converted to a zero array using the remaining queries. If it is not possible to convert nums to a zero array, return -1.

 

Example 1:

Input: nums = [2,0,2], queries = [[0,2],[0,2],[1,1]]

Output: 1

Explanation:

After removing queries[2], nums can still be converted to a zero array.

Using queries[0], decrement nums[0] and nums[2] by 1 and nums[1] by 0.
Using queries[1], decrement nums[0] and nums[2] by 1 and nums[1] by 0.
Example 2:

Input: nums = [1,1,1,1], queries = [[1,3],[0,2],[1,3],[1,2]]

Output: 2

Explanation:

We can remove queries[2] and queries[3].

Example 3:

Input: nums = [1,2,3,4], queries = [[0,3]]

Output: -1

Explanation:

nums cannot be converted to a zero array even after using all the queries.

 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 105
1 <= queries.length <= 105
queries[i].length == 2
0 <= li <= ri < nums.length


Approach: Greedy + Priority Queue
Intuition
We start by looking at the first element in the nums array — nums[0].

If nums[0] is greater than 0, it means we need to apply that many operations (from the queries array) to reduce it to 0. But we can only use queries that start from index 0 or earlier.

So which queries should we choose? To make sure we can help more future elements, we greedily pick the queries that go farthest to the right — meaning, the ones with the biggest right endpoints.

After choosing the right queries for nums[0], we move to nums[1].

Some queries we picked before may not help nums[1], because they might not cover index 1. So we need to remove their effect from index 1 — we can do this easily using a difference array.

Now, if nums[1] is still greater than 0, we again need to pick some queries that start from index 1 or earlier and go as far as possible to the right. We do this until we've applied enough operations to make nums[1] become 0.

To handle all of this efficiently, we use a priority queue (heap). As we go through each index in nums, we add the right endpoints of the matching queries into the heap. If we need more operations, we pull out the queries that go farthest right first (the largest right endpoints).

At the end of the process, the number of queries we chose (i.e., the size of the heap) is the answer — that's how many queries we need to delete to make all values in nums become 0.


Code :

class Solution {

    public int maxRemoval(int[] nums, int[][] queries) {
        Arrays.sort(queries, (a, b) -> a[0] - b[0]);
        PriorityQueue<Integer> heap = new PriorityQueue<>(Collections.reverseOrder());
        int[] deltaArray = new int[nums.length + 1];
        int operations = 0;

        for (int i = 0, j = 0; i < nums.length; i++) {
            operations += deltaArray[i];
            while (j < queries.length && queries[j][0] == i) {
                heap.offer(queries[j][1]);
                j++;
            }
            while (operations < nums[i] && !heap.isEmpty() && heap.peek() >= i) {
                operations += 1;
                deltaArray[heap.poll() + 1] -= 1;
            }
            if (operations < nums[i]) {
                return -1;
            }
        }
        return heap.size();
    }
}
