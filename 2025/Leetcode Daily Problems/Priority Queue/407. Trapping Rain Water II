Given an m x n integer matrix heightMap representing the height of each unit cell in a 2D elevation map, return the volume of water it can trap after raining.

 

Example 1:


Input: heightMap = [[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]
Output: 4
Explanation: After the rain, water is trapped between the blocks.
We have two small ponds 1 and 3 units trapped.
The total volume of water trapped is 4.
Example 2:


Input: heightMap = [[3,3,3,3,3],[3,2,2,2,3],[3,2,1,2,3],[3,2,2,2,3],[3,3,3,3,3]]
Output: 10
 

Constraints:

m == heightMap.length
n == heightMap[i].length
1 <= m, n <= 200
0 <= heightMap[i][j] <= 2 * 104

Code : (BFS + Priority Queue)

import java.util.PriorityQueue;
class Solution {
    public int trapRainWater(int[][] heightMap) {
        int[] dRow = { 0, 0, -1, 1 }, dCol = { -1, 1, 0, 0 };
        int numRows = heightMap.length, numCols = heightMap[0].length;
        boolean[][] visited = new boolean[numRows][numCols];
        PriorityQueue<Cell> boundary = new PriorityQueue<>();      
        // Add boundary cells
        for (int i = 0; i < numRows; i++) {
            boundary.offer(new Cell(heightMap[i][0], i, 0));
            boundary.offer(new Cell(heightMap[i][numCols - 1], i, numCols - 1));
            visited[i][0] = visited[i][numCols - 1] = true;
        }
        for (int i = 0; i < numCols; i++) {
            boundary.offer(new Cell(heightMap[0][i], 0, i));
            boundary.offer(new Cell(heightMap[numRows - 1][i], numRows - 1, i));
            visited[0][i] = visited[numRows - 1][i] = true;
        }
        int totalWaterVolume = 0;
        while (!boundary.isEmpty()) {
            Cell cell = boundary.poll();
            for (int d = 0; d < 4; d++) {
                int nr = cell.row + dRow[d], nc = cell.col + dCol[d];
                if (nr >= 0 && nc >= 0 && nr < numRows && nc < numCols && !visited[nr][nc]) {
                    int neighborHeight = heightMap[nr][nc];
                    if (neighborHeight < cell.height) totalWaterVolume += cell.height - neighborHeight;
                    boundary.offer(new Cell(Math.max(neighborHeight, cell.height), nr, nc));
                    visited[nr][nc] = true;
                }
            }
        }
        return totalWaterVolume;
    }
    private static class Cell implements Comparable<Cell> {
        int height, row, col;
        public Cell(int height, int row, int col) { this.height = height; this.row = row; this.col = col; }
        public int compareTo(Cell other) { return Integer.compare(this.height, other.height); }
    }
}
